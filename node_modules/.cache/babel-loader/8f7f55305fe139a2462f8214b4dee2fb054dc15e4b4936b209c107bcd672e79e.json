{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Downloads\\\\mern-amazona-master\\\\frontend\\\\src\\\\screens\\\\MapScreen.js\",\n  _s = $RefreshSig$();\nimport axios from 'axios';\nimport React, { useContext, useEffect, useRef, useState } from 'react';\nimport { LoadScript, GoogleMap, StandaloneSearchBox, Marker } from '@react-google-maps/api';\nimport { useNavigate } from 'react-router-dom';\nimport { Store } from '../Store';\nimport Button from 'react-bootstrap/Button';\nimport { toast } from 'react-toastify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultLocation = {\n  lat: 45.516,\n  lng: -73.56\n};\nconst libs = ['places'];\nexport default function MapScreen() {\n  _s();\n  const {\n    state,\n    dispatch: ctxDispatch\n  } = useContext(Store);\n  const {\n    userInfo\n  } = state;\n  const navigate = useNavigate();\n  const [googleApiKey, setGoogleApiKey] = useState('');\n  const [center, setCenter] = useState(defaultLocation);\n  const [location, setLocation] = useState(center);\n  const mapRef = useRef(null);\n  const placeRef = useRef(null);\n  const markerRef = useRef(null);\n  const getUserCurrentLocation = () => {\n    if (!navigator.geolocation) {\n      alert('Geolocation os not supported by this browser');\n    } else {\n      navigator.geolocation.getCurrentPosition(position => {\n        setCenter({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        });\n        setLocation({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        });\n      });\n    }\n  };\n  useEffect(() => {\n    const fetch = async () => {\n      const {\n        data\n      } = await axios('/api/keys/google', {\n        headers: {\n          Authorization: `BEARER ${userInfo.token}`\n        }\n      });\n      console.log(\"\" + data.key);\n      setGoogleApiKey(data.key);\n      getUserCurrentLocation();\n    };\n    fetch();\n    ctxDispatch({\n      type: 'SET_FULLBOX_ON'\n    });\n  }, [ctxDispatch]);\n  const onLoad = map => {\n    mapRef.current = map;\n  };\n  const onIdle = () => {\n    setLocation({\n      lat: mapRef.current.center.lat(),\n      lng: mapRef.current.center.lng()\n    });\n  };\n  const onLoadPlaces = place => {\n    placeRef.current = place;\n  };\n  const onPlacesChanged = () => {\n    const place = placeRef.current.getPlaces()[0].geometry.location;\n    setCenter({\n      lat: place.lat(),\n      lng: place.lng()\n    });\n    setLocation({\n      lat: place.lat(),\n      lng: place.lng()\n    });\n  };\n  const onMarkerLoad = marker => {\n    markerRef.current = marker;\n  };\n  const onConfirm = () => {\n    const places = placeRef.current.getPlaces() || [{}];\n    ctxDispatch({\n      type: 'SAVE_SHIPPING_ADDRESS_MAP_LOCATION',\n      payload: {\n        lat: location.lat,\n        lng: location.lng,\n        address: places[0].formatted_address,\n        name: places[0].name,\n        vicinity: places[0].vicinity,\n        googleAddressId: places[0].id\n      }\n    });\n    toast.success('location selected successfully.');\n    navigate('/shipping');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"full-box\",\n    children: /*#__PURE__*/_jsxDEV(LoadScript, {\n      libraries: libs,\n      googleMapsApiKey: googleApiKey,\n      children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n        id: \"smaple-map\",\n        mapContainerStyle: {\n          height: '100%',\n          width: '100%'\n        },\n        center: center,\n        zoom: 15,\n        onLoad: onLoad,\n        onIdle: onIdle,\n        children: [/*#__PURE__*/_jsxDEV(StandaloneSearchBox, {\n          onLoad: onLoadPlaces,\n          onPlacesChanged: onPlacesChanged,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"map-input-box\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"Enter your address\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              type: \"button\",\n              onClick: onConfirm,\n              children: \"Confirm\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Marker, {\n          position: location,\n          onLoad: onMarkerLoad\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n}\n_s(MapScreen, \"tH02IKR5jF0yL2d3j48WCjJosTQ=\", false, function () {\n  return [useNavigate];\n});\n_c = MapScreen;\nvar _c;\n$RefreshReg$(_c, \"MapScreen\");","map":{"version":3,"names":["axios","React","useContext","useEffect","useRef","useState","LoadScript","GoogleMap","StandaloneSearchBox","Marker","useNavigate","Store","Button","toast","defaultLocation","lat","lng","libs","MapScreen","state","dispatch","ctxDispatch","userInfo","navigate","googleApiKey","setGoogleApiKey","center","setCenter","location","setLocation","mapRef","placeRef","markerRef","getUserCurrentLocation","navigator","geolocation","alert","getCurrentPosition","position","coords","latitude","longitude","fetch","data","headers","Authorization","token","console","log","key","type","onLoad","map","current","onIdle","onLoadPlaces","place","onPlacesChanged","getPlaces","geometry","onMarkerLoad","marker","onConfirm","places","payload","address","formatted_address","name","vicinity","googleAddressId","id","success","height","width"],"sources":["C:/Users/Admin/Downloads/mern-amazona-master/frontend/src/screens/MapScreen.js"],"sourcesContent":["import axios from 'axios';\nimport React, { useContext, useEffect, useRef, useState } from 'react';\nimport {\n  LoadScript,\n  GoogleMap,\n  StandaloneSearchBox,\n  Marker,\n} from '@react-google-maps/api';\nimport { useNavigate } from 'react-router-dom';\nimport { Store } from '../Store';\nimport Button from 'react-bootstrap/Button';\nimport { toast } from 'react-toastify';\n\nconst defaultLocation = { lat: 45.516, lng: -73.56 };\nconst libs = ['places'];\n\nexport default function MapScreen() {\n  const { state, dispatch: ctxDispatch } = useContext(Store);\n  const { userInfo } = state;\n  const navigate = useNavigate();\n  const [googleApiKey, setGoogleApiKey] = useState('');\n  const [center, setCenter] = useState(defaultLocation);\n  const [location, setLocation] = useState(center);\n\n  const mapRef = useRef(null);\n  const placeRef = useRef(null);\n  const markerRef = useRef(null);\n\n  const getUserCurrentLocation = () => {\n    if (!navigator.geolocation) {\n      alert('Geolocation os not supported by this browser');\n    } else {\n      navigator.geolocation.getCurrentPosition((position) => {\n        setCenter({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude,\n        });\n        setLocation({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude,\n        });\n      });\n    }\n  };\n  useEffect(() => {\n    const fetch = async () => {\n      const { data } = await axios('/api/keys/google', {\n       \n        headers: { Authorization: `BEARER ${userInfo.token}` },\n      });\n      console.log(\"\"+data.key);\n      setGoogleApiKey(data.key);\n      getUserCurrentLocation();\n    };\n\n    fetch();\n    ctxDispatch({\n      type: 'SET_FULLBOX_ON',\n    });\n  }, [ctxDispatch]);\n\n  const onLoad = (map) => {\n    mapRef.current = map;\n  };\n  const onIdle = () => {\n    setLocation({\n      lat: mapRef.current.center.lat(),\n      lng: mapRef.current.center.lng(),\n    });\n  };\n\n  const onLoadPlaces = (place) => {\n    placeRef.current = place;\n  };\n  const onPlacesChanged = () => {\n    const place = placeRef.current.getPlaces()[0].geometry.location;\n    setCenter({ lat: place.lat(), lng: place.lng() });\n    setLocation({ lat: place.lat(), lng: place.lng() });\n  };\n\n  const onMarkerLoad = (marker) => {\n    markerRef.current = marker;\n  };\n\n  const onConfirm = () => {\n    const places = placeRef.current.getPlaces() || [{}];\n    ctxDispatch({\n      type: 'SAVE_SHIPPING_ADDRESS_MAP_LOCATION',\n      payload: {\n        lat: location.lat,\n        lng: location.lng,\n        address: places[0].formatted_address,\n        name: places[0].name,\n        vicinity: places[0].vicinity,\n        googleAddressId: places[0].id,\n      },\n    });\n    toast.success('location selected successfully.');\n    navigate('/shipping');\n  };\n  return (\n    <div className=\"full-box\">\n      <LoadScript libraries={libs} googleMapsApiKey={googleApiKey}>\n        <GoogleMap\n          id=\"smaple-map\"\n          mapContainerStyle={{ height: '100%', width: '100%' }}\n          center={center}\n          zoom={15}\n          onLoad={onLoad}\n          onIdle={onIdle}\n        >\n          <StandaloneSearchBox\n            onLoad={onLoadPlaces}\n            onPlacesChanged={onPlacesChanged}\n          >\n            <div className=\"map-input-box\">\n              <input type=\"text\" placeholder=\"Enter your address\"></input>\n              <Button type=\"button\" onClick={onConfirm}>\n                Confirm\n              </Button>\n            </div>\n          </StandaloneSearchBox>\n          <Marker position={location} onLoad={onMarkerLoad}></Marker>\n        </GoogleMap>\n      </LoadScript>\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}