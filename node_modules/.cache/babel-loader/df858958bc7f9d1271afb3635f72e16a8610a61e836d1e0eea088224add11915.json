{"ast":null,"code":"import _assertThisInitialized from \"C:/Users/Admin/Downloads/mern-amazona-master/frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _createForOfIteratorHelper from \"C:/Users/Admin/Downloads/mern-amazona-master/frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"C:/Users/Admin/Downloads/mern-amazona-master/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"C:/Users/Admin/Downloads/mern-amazona-master/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"C:/Users/Admin/Downloads/mern-amazona-master/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Admin/Downloads/mern-amazona-master/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/Admin/Downloads/mern-amazona-master/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Admin/Downloads/mern-amazona-master/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _regeneratorRuntime from \"C:/Users/Admin/Downloads/mern-amazona-master/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Admin/Downloads/mern-amazona-master/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectWithoutProperties from \"C:/Users/Admin/Downloads/mern-amazona-master/frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _slicedToArray from \"C:/Users/Admin/Downloads/mern-amazona-master/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nvar _excluded = [\"onLoad\", \"onError\"];\nimport * as React from 'react';\nimport { useEffect, useState } from 'react';\n\n/**\n * Hook to load external script.\n * @param src - Source url to load.\n * @param onLoad - Success callback.\n * @param onError - Error callback.\n */\nfunction useLoadScript(src, onLoad, onError) {\n  useEffect(function () {\n    if (!document) {\n      return;\n    }\n    // Find script tag with same src in DOM.\n    var foundScript = document.querySelector(\"script[src=\\\"\".concat(src, \"\\\"]\"));\n    // Call onLoad if script marked as loaded.\n    if (foundScript === null || foundScript === void 0 ? void 0 : foundScript.dataset.loaded) {\n      onLoad === null || onLoad === void 0 ? void 0 : onLoad();\n      return;\n    }\n    // Create or get existed tag.\n    var script = foundScript || document.createElement(\"script\");\n    // Set src if no script was found.\n    if (!foundScript) {\n      script.src = src;\n    }\n    // Mark script as loaded on load event.\n    var onLoadWithMarker = function onLoadWithMarker() {\n      script.dataset.loaded = \"1\";\n      onLoad === null || onLoad === void 0 ? void 0 : onLoad();\n    };\n    script.addEventListener(\"load\", onLoadWithMarker);\n    if (onError) {\n      script.addEventListener(\"error\", onError);\n    }\n    // Add to DOM if not yet added.\n    if (!foundScript) {\n      document.head.append(script);\n    }\n    return function () {\n      script.removeEventListener(\"load\", onLoadWithMarker);\n      if (onError) {\n        script.removeEventListener(\"error\", onError);\n      }\n    };\n  }, []);\n}\n\n/**\n * Hook to load Google Charts JS API.\n * @param params - Load parameters.\n * @param [params.chartVersion] - Chart version to load.\n * @param [params.chartPackages] - Packages to load.\n * @param [params.chartLanguage] - Languages to load.\n * @param [params.mapsApiKey] - Google Maps api key.\n * @returns\n */\nfunction useLoadGoogleCharts(param) {\n  var _param$chartVersion = param.chartVersion,\n    chartVersion = _param$chartVersion === void 0 ? \"current\" : _param$chartVersion,\n    _param$chartPackages = param.chartPackages,\n    chartPackages = _param$chartPackages === void 0 ? [\"corechart\", \"controls\"] : _param$chartPackages,\n    _param$chartLanguage = param.chartLanguage,\n    chartLanguage = _param$chartLanguage === void 0 ? \"en\" : _param$chartLanguage,\n    mapsApiKey = param.mapsApiKey;\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    googleCharts = _useState2[0],\n    setGoogleCharts = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    failed = _useState4[0],\n    setFailed = _useState4[1];\n  useLoadScript(\"https://www.gstatic.com/charts/loader.js\", function () {\n    // @ts-expect-error Getting object from global namespace.\n    var google = window === null || window === void 0 ? void 0 : window.google;\n    if (!google) {\n      return;\n    }\n    google.charts.load(chartVersion, {\n      packages: chartPackages,\n      language: chartLanguage,\n      mapsApiKey: mapsApiKey\n    });\n    google.charts.setOnLoadCallback(function () {\n      setGoogleCharts(google);\n    });\n  }, function () {\n    setFailed(true);\n  });\n  return [googleCharts, failed];\n}\n/**\n * Wrapper around useLoadGoogleCharts to use in legacy components.\n */\nfunction LoadGoogleCharts(param) {\n  var onLoad = param.onLoad,\n    onError = param.onError,\n    params = _objectWithoutProperties(param, _excluded);\n  var _useLoadGoogleCharts = useLoadGoogleCharts(params),\n    _useLoadGoogleCharts2 = _slicedToArray(_useLoadGoogleCharts, 2),\n    googleCharts = _useLoadGoogleCharts2[0],\n    failed = _useLoadGoogleCharts2[1];\n  useEffect(function () {\n    if (googleCharts && onLoad) {\n      onLoad(googleCharts);\n    }\n  }, [googleCharts]);\n  useEffect(function () {\n    if (failed && onError) {\n      onError();\n    }\n  }, [failed]);\n  return null;\n}\nvar chartDefaultProps = {\n  // <DEPRECATED_PROPS>\n  legend_toggle: false,\n  // </DEPRECATED_PROPS>\n  options: {},\n  legendToggle: false,\n  getChartWrapper: function getChartWrapper() {},\n  spreadSheetQueryParameters: {\n    headers: 1,\n    gid: 1\n  },\n  rootProps: {},\n  chartWrapperParams: {}\n};\nvar uniqueID = 0;\nvar generateUniqueID = function generateUniqueID() {\n  uniqueID += 1;\n  return \"reactgooglegraph-\".concat(uniqueID);\n};\nvar DEFAULT_CHART_COLORS = [\"#3366CC\", \"#DC3912\", \"#FF9900\", \"#109618\", \"#990099\", \"#3B3EAC\", \"#0099C6\", \"#DD4477\", \"#66AA00\", \"#B82E2E\", \"#316395\", \"#994499\", \"#22AA99\", \"#AAAA11\", \"#6633CC\", \"#E67300\", \"#8B0707\", \"#329262\", \"#5574A6\", \"#3B3EAC\"];\nvar loadDataTableFromSpreadSheet = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(googleViz, spreadSheetUrl) {\n    var urlParams,\n      _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          urlParams = _args.length > 2 && _args[2] !== void 0 ? _args[2] : {};\n          return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n            var headers = \"\".concat(urlParams.headers ? \"headers=\".concat(urlParams.headers) : \"headers=0\");\n            var queryString = \"\".concat(urlParams.query ? \"&tq=\".concat(encodeURIComponent(urlParams.query)) : \"\");\n            var gid = \"\".concat(urlParams.gid ? \"&gid=\".concat(urlParams.gid) : \"\");\n            var sheet = \"\".concat(urlParams.sheet ? \"&sheet=\".concat(urlParams.sheet) : \"\");\n            var access_token = \"\".concat(urlParams.access_token ? \"&access_token=\".concat(urlParams.access_token) : \"\");\n            var urlQueryString = \"\".concat(headers).concat(gid).concat(sheet).concat(queryString).concat(access_token);\n            var urlToSpreadSheet = \"\".concat(spreadSheetUrl, \"/gviz/tq?\").concat(urlQueryString); //&tq=${queryString}`;\n            var query = new googleViz.visualization.Query(urlToSpreadSheet);\n            query.send(function (response) {\n              if (response.isError()) {\n                reject(\"Error in query:  \".concat(response.getMessage(), \" \").concat(response.getDetailedMessage()));\n              } else {\n                resolve(response.getDataTable());\n              }\n            });\n          }));\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return function loadDataTableFromSpreadSheet(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar _React$createContext = /*#__PURE__*/React.createContext(chartDefaultProps),\n  Provider = _React$createContext.Provider,\n  Consumer = _React$createContext.Consumer;\nvar ContextProvider = function ContextProvider(param) {\n  var children = param.children,\n    value = param.value;\n  return /*#__PURE__*/React.createElement(Provider, {\n    value: value\n  }, children);\n};\nvar ContextConsumer = function ContextConsumer(param) {\n  var render = param.render;\n  return /*#__PURE__*/React.createElement(Consumer, null, function (context) {\n    return render(context);\n  });\n};\nvar GRAY_COLOR = \"#CCCCCC\";\nvar GoogleChartDataTableInner = /*#__PURE__*/function (_React$Component) {\n  _inherits(GoogleChartDataTableInner, _React$Component);\n  var _super = _createSuper(GoogleChartDataTableInner);\n  function GoogleChartDataTableInner() {\n    var _this2;\n    _classCallCheck(this, GoogleChartDataTableInner);\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    _this2 = _super.call.apply(_super, [this].concat(args));\n    _this2.state = {\n      hiddenColumns: []\n    };\n    _this2.listenToLegendToggle = function () {\n      var _this2$props = _this2.props,\n        google = _this2$props.google,\n        googleChartWrapper = _this2$props.googleChartWrapper;\n      google.visualization.events.addListener(googleChartWrapper, \"select\", function () {\n        var chart = googleChartWrapper.getChart();\n        var selection = chart.getSelection();\n        var dataTable = googleChartWrapper.getDataTable();\n        if (selection.length === 0 ||\n        // We want to listen to when a whole row is selected. This is the case only when row === null\n        selection[0].row || !dataTable) {\n          return;\n        }\n        var columnIndex = selection[0].column;\n        var columnID = _this2.getColumnID(dataTable, columnIndex);\n        if (_this2.state.hiddenColumns.includes(columnID)) {\n          _this2.setState(function (state) {\n            return _objectSpread(_objectSpread({}, state), {}, {\n              hiddenColumns: _toConsumableArray(state.hiddenColumns.filter(function (colID) {\n                return colID !== columnID;\n              }))\n            });\n          });\n        } else {\n          _this2.setState(function (state) {\n            return _objectSpread(_objectSpread({}, state), {}, {\n              hiddenColumns: [].concat(_toConsumableArray(state.hiddenColumns), [columnID])\n            });\n          });\n        }\n      });\n    };\n    _this2.applyFormatters = function (dataTable, formatters) {\n      var google = _this2.props.google;\n      var _iterator = _createForOfIteratorHelper(formatters),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var formatter = _step.value;\n          switch (formatter.type) {\n            case \"ArrowFormat\":\n              {\n                var vizFormatter = new google.visualization.ArrowFormat(formatter.options);\n                vizFormatter.format(dataTable, formatter.column);\n                break;\n              }\n            case \"BarFormat\":\n              {\n                var _vizFormatter = new google.visualization.BarFormat(formatter.options);\n                _vizFormatter.format(dataTable, formatter.column);\n                break;\n              }\n            case \"ColorFormat\":\n              {\n                var _vizFormatter2 = new google.visualization.ColorFormat(formatter.options);\n                var ranges = formatter.ranges;\n                var _iterator2 = _createForOfIteratorHelper(ranges),\n                  _step2;\n                try {\n                  for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                    var range = _step2.value;\n                    _vizFormatter2.addRange.apply(_vizFormatter2, _toConsumableArray(range));\n                  }\n                } catch (err) {\n                  _iterator2.e(err);\n                } finally {\n                  _iterator2.f();\n                }\n                _vizFormatter2.format(dataTable, formatter.column);\n                break;\n              }\n            case \"DateFormat\":\n              {\n                var _vizFormatter3 = new google.visualization.DateFormat(formatter.options);\n                _vizFormatter3.format(dataTable, formatter.column);\n                break;\n              }\n            case \"NumberFormat\":\n              {\n                var _vizFormatter4 = new google.visualization.NumberFormat(formatter.options);\n                _vizFormatter4.format(dataTable, formatter.column);\n                break;\n              }\n            case \"PatternFormat\":\n              {\n                var _vizFormatter5 = new google.visualization.PatternFormat(formatter.options);\n                _vizFormatter5.format(dataTable, formatter.column);\n                break;\n              }\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    };\n    _this2.getColumnID = function (dataTable, columnIndex) {\n      return dataTable.getColumnId(columnIndex) || dataTable.getColumnLabel(columnIndex);\n    };\n    _this2.draw = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(param) {\n        var data, diffdata, rows, columns, options, legend_toggle, legendToggle, chartType, formatters, spreadSheetUrl, spreadSheetQueryParameters, _this2$props2, google, googleChartWrapper, dataTable, chartDiff, oldData, newData, columnCount, i, columnID, previousColumnLabel, previousColumnID, previousColumnType, chart;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              data = param.data, diffdata = param.diffdata, rows = param.rows, columns = param.columns, options = param.options, legend_toggle = param.legend_toggle, legendToggle = param.legendToggle, chartType = param.chartType, formatters = param.formatters, spreadSheetUrl = param.spreadSheetUrl, spreadSheetQueryParameters = param.spreadSheetQueryParameters;\n              _this2$props2 = _this2.props, google = _this2$props2.google, googleChartWrapper = _this2$props2.googleChartWrapper;\n              chartDiff = null;\n              if (diffdata) {\n                oldData = google.visualization.arrayToDataTable(diffdata.old);\n                newData = google.visualization.arrayToDataTable(diffdata.new);\n                chartDiff = google.visualization[chartType].prototype.computeDiff(oldData, newData);\n              }\n              if (!(data !== null)) {\n                _context2.next = 8;\n                break;\n              }\n              if (Array.isArray(data)) {\n                dataTable = google.visualization.arrayToDataTable(data);\n              } else {\n                dataTable = new google.visualization.DataTable(data);\n              }\n              _context2.next = 19;\n              break;\n            case 8:\n              if (!(rows && columns)) {\n                _context2.next = 12;\n                break;\n              }\n              dataTable = google.visualization.arrayToDataTable([columns].concat(_toConsumableArray(rows)));\n              _context2.next = 19;\n              break;\n            case 12:\n              if (!spreadSheetUrl) {\n                _context2.next = 18;\n                break;\n              }\n              _context2.next = 15;\n              return loadDataTableFromSpreadSheet(google, spreadSheetUrl, spreadSheetQueryParameters);\n            case 15:\n              dataTable = _context2.sent;\n              _context2.next = 19;\n              break;\n            case 18:\n              dataTable = google.visualization.arrayToDataTable([]);\n            case 19:\n              columnCount = dataTable.getNumberOfColumns();\n              for (i = 0; i < columnCount; i += 1) {\n                columnID = _this2.getColumnID(dataTable, i);\n                if (_this2.state.hiddenColumns.includes(columnID)) {\n                  previousColumnLabel = dataTable.getColumnLabel(i);\n                  previousColumnID = dataTable.getColumnId(i);\n                  previousColumnType = dataTable.getColumnType(i);\n                  dataTable.removeColumn(i);\n                  dataTable.addColumn({\n                    label: previousColumnLabel,\n                    id: previousColumnID,\n                    type: previousColumnType\n                  });\n                }\n              }\n              chart = googleChartWrapper.getChart();\n              if (googleChartWrapper.getChartType() === \"Timeline\") {\n                chart && chart.clearChart();\n              }\n              googleChartWrapper.setChartType(chartType);\n              googleChartWrapper.setOptions(options || {});\n              googleChartWrapper.setDataTable(dataTable);\n              googleChartWrapper.draw();\n              if (_this2.props.googleChartDashboard !== null) {\n                _this2.props.googleChartDashboard.draw(dataTable);\n              }\n              if (chartDiff) {\n                googleChartWrapper.setDataTable(chartDiff);\n                googleChartWrapper.draw();\n              }\n              if (formatters) {\n                _this2.applyFormatters(dataTable, formatters);\n                googleChartWrapper.setDataTable(dataTable);\n                googleChartWrapper.draw();\n              }\n              if (legendToggle === true || legend_toggle === true) {\n                _this2.grayOutHiddenColumns({\n                  options: options\n                });\n              }\n              return _context2.abrupt(\"return\");\n            case 32:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }));\n      return function (_x3) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    _this2.grayOutHiddenColumns = function (param) {\n      var options = param.options;\n      var googleChartWrapper = _this2.props.googleChartWrapper;\n      var dataTable = googleChartWrapper.getDataTable();\n      if (!dataTable) return;\n      var columnCount = dataTable.getNumberOfColumns();\n      var hasAHiddenColumn = _this2.state.hiddenColumns.length > 0;\n      if (hasAHiddenColumn === false) return;\n      var colors = Array.from({\n        length: columnCount - 1\n      }).map(function (dontcare, i) {\n        var columnID = _this2.getColumnID(dataTable, i + 1);\n        if (_this2.state.hiddenColumns.includes(columnID)) {\n          return GRAY_COLOR;\n        } else if (options && options.colors) {\n          return options.colors[i];\n        } else {\n          return DEFAULT_CHART_COLORS[i];\n        }\n      });\n      googleChartWrapper.setOptions(_objectSpread(_objectSpread({}, options), {}, {\n        colors: colors\n      }));\n      googleChartWrapper.draw();\n    };\n    _this2.onResize = function () {\n      var googleChartWrapper = _this2.props.googleChartWrapper;\n      googleChartWrapper.draw();\n    };\n    return _this2;\n  }\n  _createClass(GoogleChartDataTableInner, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.draw(this.props);\n      window.addEventListener(\"resize\", this.onResize);\n      if (this.props.legend_toggle || this.props.legendToggle) {\n        this.listenToLegendToggle();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var _this$props = this.props,\n        google = _this$props.google,\n        googleChartWrapper = _this$props.googleChartWrapper;\n      window.removeEventListener(\"resize\", this.onResize);\n      google.visualization.events.removeAllListeners(googleChartWrapper);\n      if (googleChartWrapper.getChartType() === \"Timeline\") {\n        googleChartWrapper.getChart() && googleChartWrapper.getChart().clearChart();\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.draw(this.props);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return null;\n    }\n  }]);\n  return GoogleChartDataTableInner;\n}(React.Component);\nvar GoogleChartDataTable = /*#__PURE__*/function (_React$Component2) {\n  _inherits(GoogleChartDataTable, _React$Component2);\n  var _super2 = _createSuper(GoogleChartDataTable);\n  function GoogleChartDataTable() {\n    _classCallCheck(this, GoogleChartDataTable);\n    return _super2.apply(this, arguments);\n  }\n  _createClass(GoogleChartDataTable, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {}\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {}\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate() {\n      return false;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n        google = _this$props2.google,\n        googleChartWrapper = _this$props2.googleChartWrapper,\n        googleChartDashboard = _this$props2.googleChartDashboard;\n      return /*#__PURE__*/React.createElement(ContextConsumer, {\n        render: function render(props) {\n          return /*#__PURE__*/React.createElement(GoogleChartDataTableInner, Object.assign({}, props, {\n            google: google,\n            googleChartWrapper: googleChartWrapper,\n            googleChartDashboard: googleChartDashboard\n          }));\n        }\n      });\n    }\n  }]);\n  return GoogleChartDataTable;\n}(React.Component);\nvar GoogleChartEvents = /*#__PURE__*/function (_React$Component3) {\n  _inherits(GoogleChartEvents, _React$Component3);\n  var _super3 = _createSuper(GoogleChartEvents);\n  function GoogleChartEvents() {\n    _classCallCheck(this, GoogleChartEvents);\n    return _super3.apply(this, arguments);\n  }\n  _createClass(GoogleChartEvents, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate() {\n      return false;\n    }\n  }, {\n    key: \"listenToEvents\",\n    value: function listenToEvents(param) {\n      var _this3 = this;\n      var chartEvents = param.chartEvents,\n        google = param.google,\n        googleChartWrapper = param.googleChartWrapper;\n      if (!chartEvents) {\n        return;\n      }\n      google.visualization.events.removeAllListeners(googleChartWrapper);\n      var _iterator3 = _createForOfIteratorHelper(chartEvents),\n        _step3;\n      try {\n        var _loop = function _loop() {\n          var event = _step3.value;\n          _this = _this3;\n          var eventName = event.eventName,\n            callback = event.callback;\n          google.visualization.events.addListener(googleChartWrapper, eventName, function () {\n            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n              args[_key] = arguments[_key];\n            }\n            callback({\n              chartWrapper: googleChartWrapper,\n              props: _this.props,\n              google: google,\n              eventArgs: args\n            });\n          });\n        };\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var _this;\n          _loop();\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n      var _this$props3 = this.props,\n        google = _this$props3.google,\n        googleChartWrapper = _this$props3.googleChartWrapper;\n      return /*#__PURE__*/React.createElement(ContextConsumer, {\n        render: function render(propsFromContext) {\n          _this4.listenToEvents({\n            chartEvents: propsFromContext.chartEvents || null,\n            google: google,\n            googleChartWrapper: googleChartWrapper\n          });\n          return null;\n        }\n      });\n    }\n  }]);\n  return GoogleChartEvents;\n}(React.Component);\nvar controlCounter = 0;\nvar GoogleChart = /*#__PURE__*/function (_React$Component4) {\n  _inherits(GoogleChart, _React$Component4);\n  var _super4 = _createSuper(GoogleChart);\n  function GoogleChart() {\n    var _this5;\n    for (var _len3 = arguments.length, args1 = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args1[_key3] = arguments[_key3];\n    }\n    _classCallCheck(this, GoogleChart);\n    var _this1;\n    _this5 = _super4.call(this), _this1 = _assertThisInitialized(_this5);\n    _this5.state = {\n      googleChartWrapper: null,\n      googleChartDashboard: null,\n      googleChartControls: null,\n      googleChartEditor: null,\n      isReady: false\n    };\n    _this5.graphID = null;\n    _this5.dashboard_ref = /*#__PURE__*/React.createRef();\n    _this5.toolbar_ref = /*#__PURE__*/React.createRef();\n    _this5.getGraphID = function () {\n      var _this5$props = _this5.props,\n        graphID = _this5$props.graphID,\n        graph_id = _this5$props.graph_id;\n      var instanceGraphID;\n      if (!graphID && !graph_id) {\n        if (!_this5.graphID) {\n          instanceGraphID = generateUniqueID();\n        } else {\n          instanceGraphID = _this5.graphID;\n        }\n      } else if (graphID && !graph_id) {\n        instanceGraphID = graphID;\n      } else if (graph_id && !graphID) {\n        instanceGraphID = graph_id;\n      } else {\n        instanceGraphID = graphID;\n      }\n      _this5.graphID = instanceGraphID;\n      return _this5.graphID;\n    };\n    _this5.getControlID = function (id, index) {\n      controlCounter += 1;\n      var controlID;\n      if (typeof id === \"undefined\") {\n        controlID = \"googlechart-control-\".concat(index, \"-\").concat(controlCounter);\n      } else {\n        controlID = id;\n      }\n      return controlID;\n    };\n    _this5.addControls = function (googleChartWrapper, googleChartDashboard) {\n      var _this5$props2 = _this5.props,\n        google = _this5$props2.google,\n        controls = _this5$props2.controls;\n      var googleChartControls = !controls ? null : controls.map(function (control, i) {\n        var controlIDMaybe = control.controlID,\n          controlType = control.controlType,\n          controlOptions = control.options,\n          controlWrapperParams = control.controlWrapperParams;\n        var controlID = _this5.getControlID(controlIDMaybe, i);\n        return {\n          controlProp: control,\n          control: new google.visualization.ControlWrapper(_objectSpread({\n            containerId: controlID,\n            controlType: controlType,\n            options: controlOptions\n          }, controlWrapperParams))\n        };\n      });\n      if (!googleChartControls) {\n        return null;\n      }\n      googleChartDashboard.bind(googleChartControls.map(function (param) {\n        var control = param.control;\n        return control;\n      }), googleChartWrapper);\n      var _iterator4 = _createForOfIteratorHelper(googleChartControls),\n        _step4;\n      try {\n        var _loop2 = function _loop2() {\n          var chartControl = _step4.value;\n          var control = chartControl.control,\n            controlProp = chartControl.controlProp;\n          var _controlProp$controlE = controlProp.controlEvents,\n            controlEvents = _controlProp$controlE === void 0 ? [] : _controlProp$controlE;\n          var _iterator5 = _createForOfIteratorHelper(controlEvents),\n            _step5;\n          try {\n            var _loop3 = function _loop3() {\n              var event = _step5.value;\n              _this = _assertThisInitialized(_this5);\n              var callback = event.callback,\n                eventName = event.eventName;\n              google.visualization.events.removeListener(control, eventName, callback);\n              google.visualization.events.addListener(control, eventName, function () {\n                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n                  args[_key] = arguments[_key];\n                }\n                callback({\n                  chartWrapper: googleChartWrapper,\n                  controlWrapper: control,\n                  props: _this.props,\n                  google: google,\n                  eventArgs: args\n                });\n              });\n            };\n            for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n              _loop3();\n            }\n          } catch (err) {\n            _iterator5.e(err);\n          } finally {\n            _iterator5.f();\n          }\n        };\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var _this;\n          _loop2();\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n      return googleChartControls;\n    };\n    _this5.renderChart = function () {\n      var _this5$props3 = _this5.props,\n        width = _this5$props3.width,\n        height = _this5$props3.height,\n        options = _this5$props3.options,\n        style = _this5$props3.style,\n        className = _this5$props3.className,\n        rootProps = _this5$props3.rootProps,\n        google = _this5$props3.google;\n      var divStyle = _objectSpread({\n        height: height || options && options.height,\n        width: width || options && options.width\n      }, style);\n      return /*#__PURE__*/React.createElement(\"div\", Object.assign({\n        id: _this5.getGraphID(),\n        style: divStyle,\n        className: className\n      }, rootProps), _this5.state.isReady && _this5.state.googleChartWrapper !== null ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(GoogleChartDataTable, {\n        googleChartWrapper: _this5.state.googleChartWrapper,\n        google: google,\n        googleChartDashboard: _this5.state.googleChartDashboard\n      }), /*#__PURE__*/React.createElement(GoogleChartEvents, {\n        googleChartWrapper: _this5.state.googleChartWrapper,\n        google: google\n      })) : null);\n    };\n    _this5.renderControl = function () {\n      var filter = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : function (param) {\n        return true;\n      };\n      return _this1.state.isReady && _this1.state.googleChartControls !== null ? /*#__PURE__*/React.createElement(React.Fragment, null, _this1.state.googleChartControls.filter(function (param) {\n        var controlProp = param.controlProp,\n          control = param.control;\n        return filter({\n          control: control,\n          controlProp: controlProp\n        });\n      }).map(function (param) {\n        var control = param.control,\n          controlProp = param.controlProp;\n        return /*#__PURE__*/React.createElement(\"div\", {\n          key: control.getContainerId(),\n          id: control.getContainerId()\n        });\n      })) : null;\n    };\n    _this5.renderToolBar = function () {\n      if (!_this5.props.toolbarItems) return null;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        ref: _this5.toolbar_ref\n      });\n    };\n    return _this5;\n  }\n  _createClass(GoogleChart, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props4 = this.props,\n        options = _this$props4.options,\n        google = _this$props4.google,\n        chartType = _this$props4.chartType,\n        chartWrapperParams = _this$props4.chartWrapperParams,\n        toolbarItems = _this$props4.toolbarItems,\n        getChartEditor = _this$props4.getChartEditor,\n        getChartWrapper = _this$props4.getChartWrapper;\n      var chartConfig = _objectSpread({\n        chartType: chartType,\n        options: options,\n        containerId: this.getGraphID()\n      }, chartWrapperParams);\n      var googleChartWrapper = new google.visualization.ChartWrapper(chartConfig);\n      googleChartWrapper.setOptions(options || {});\n      if (getChartWrapper) {\n        getChartWrapper(googleChartWrapper, google);\n      }\n      var googleChartDashboard = new google.visualization.Dashboard(this.dashboard_ref);\n      var googleChartControls = this.addControls(googleChartWrapper, googleChartDashboard);\n      if (toolbarItems) {\n        google.visualization.drawToolbar(this.toolbar_ref.current, toolbarItems);\n      }\n      var googleChartEditor = null;\n      if (getChartEditor) {\n        googleChartEditor = new google.visualization.ChartEditor();\n        getChartEditor({\n          chartEditor: googleChartEditor,\n          chartWrapper: googleChartWrapper,\n          google: google\n        });\n      }\n      this.setState({\n        googleChartEditor: googleChartEditor,\n        googleChartControls: googleChartControls,\n        googleChartDashboard: googleChartDashboard,\n        googleChartWrapper: googleChartWrapper,\n        isReady: true\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (!this.state.googleChartWrapper) return;\n      if (!this.state.googleChartDashboard) return;\n      if (!this.state.googleChartControls) return;\n      var controls = this.props.controls;\n      if (controls) {\n        for (var i = 0; i < controls.length; i += 1) {\n          var _controls$i = controls[i],\n            controlType = _controls$i.controlType,\n            options = _controls$i.options,\n            controlWrapperParams = _controls$i.controlWrapperParams;\n          if (controlWrapperParams && \"state\" in controlWrapperParams) {\n            this.state.googleChartControls[i].control.setState(controlWrapperParams[\"state\"]);\n          }\n          this.state.googleChartControls[i].control.setOptions(options);\n          this.state.googleChartControls[i].control.setControlType(controlType);\n        }\n      }\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      return this.state.isReady !== nextState.isReady || nextProps.controls !== this.props.controls;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props5 = this.props,\n        width = _this$props5.width,\n        height = _this$props5.height,\n        options = _this$props5.options,\n        style = _this$props5.style;\n      var divStyle = _objectSpread({\n        height: height || options && options.height,\n        width: width || options && options.width\n      }, style);\n      if (this.props.render) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          ref: this.dashboard_ref,\n          style: divStyle\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          ref: this.toolbar_ref,\n          id: \"toolbar\"\n        }), this.props.render({\n          renderChart: this.renderChart,\n          renderControl: this.renderControl,\n          renderToolbar: this.renderToolBar\n        }));\n      } else {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          ref: this.dashboard_ref,\n          style: divStyle\n        }, this.renderControl(function (param) {\n          var controlProp = param.controlProp;\n          return controlProp.controlPosition !== \"bottom\";\n        }), this.renderChart(), this.renderControl(function (param) {\n          var controlProp = param.controlProp;\n          return controlProp.controlPosition === \"bottom\";\n        }), this.renderToolBar());\n      }\n    }\n  }]);\n  return GoogleChart;\n}(React.Component);\nvar Chart$1 = /*#__PURE__*/function (_React$Component5) {\n  _inherits(Chart$1, _React$Component5);\n  var _super5 = _createSuper(Chart$1);\n  function Chart$1() {\n    var _this6;\n    _classCallCheck(this, Chart$1);\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n    _this6 = _super5.call.apply(_super5, [this].concat(args));\n    _this6._isMounted = false;\n    _this6.state = {\n      loadingStatus: \"loading\",\n      google: null\n    };\n    _this6.onLoad = function (google1) {\n      if (_this6.props.onLoad) {\n        _this6.props.onLoad(google1);\n      }\n      if (_this6.isFullyLoaded(google1)) {\n        _this6.onSuccess(google1);\n      } else {\n        // IE11: window.google is not fully set, we have to wait\n        var id = setInterval(function () {\n          var google = window.google;\n          if (_this6._isMounted) {\n            if (google && _this6.isFullyLoaded(google)) {\n              clearInterval(id);\n              _this6.onSuccess(google);\n            }\n          } else {\n            clearInterval(id);\n          }\n        }, 1000);\n      }\n    };\n    _this6.onSuccess = function (google) {\n      _this6.setState({\n        loadingStatus: \"ready\",\n        google: google\n      });\n    };\n    _this6.onError = function () {\n      _this6.setState({\n        loadingStatus: \"errored\"\n      });\n    };\n    return _this6;\n  }\n  _createClass(Chart$1, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props6 = this.props,\n        chartLanguage = _this$props6.chartLanguage,\n        chartPackages = _this$props6.chartPackages,\n        chartVersion = _this$props6.chartVersion,\n        mapsApiKey = _this$props6.mapsApiKey,\n        loader = _this$props6.loader,\n        errorElement = _this$props6.errorElement;\n      return /*#__PURE__*/React.createElement(ContextProvider, {\n        value: this.props\n      }, this.state.loadingStatus === \"ready\" && this.state.google !== null ? /*#__PURE__*/React.createElement(GoogleChart, Object.assign({}, this.props, {\n        google: this.state.google\n      })) : this.state.loadingStatus === \"errored\" && errorElement ? errorElement : loader, /*#__PURE__*/React.createElement(LoadGoogleCharts, {\n        chartLanguage: chartLanguage,\n        chartPackages: chartPackages,\n        chartVersion: chartVersion,\n        mapsApiKey: mapsApiKey,\n        onLoad: this.onLoad,\n        onError: this.onError\n      }));\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._isMounted = true;\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._isMounted = false;\n    }\n  }, {\n    key: \"isFullyLoaded\",\n    value: function isFullyLoaded(google) {\n      var _this$props7 = this.props,\n        controls = _this$props7.controls,\n        toolbarItems = _this$props7.toolbarItems,\n        getChartEditor = _this$props7.getChartEditor;\n      return google && google.visualization && google.visualization.ChartWrapper && google.visualization.Dashboard && (!controls || google.visualization.ChartWrapper) && (!getChartEditor || google.visualization.ChartEditor) && (!toolbarItems || google.visualization.drawToolbar);\n    }\n  }]);\n  return Chart$1;\n}(React.Component);\nChart$1.defaultProps = chartDefaultProps;\nvar GoogleDataTableColumnRoleType;\n(function (GoogleDataTableColumnRoleType) {\n  GoogleDataTableColumnRoleType[\"annotation\"] = \"annotation\";\n  GoogleDataTableColumnRoleType[\"annotationText\"] = \"annotationText\";\n  GoogleDataTableColumnRoleType[\"certainty\"] = \"certainty\";\n  GoogleDataTableColumnRoleType[\"emphasis\"] = \"emphasis\";\n  GoogleDataTableColumnRoleType[\"interval\"] = \"interval\";\n  GoogleDataTableColumnRoleType[\"scope\"] = \"scope\";\n  GoogleDataTableColumnRoleType[\"style\"] = \"style\";\n  GoogleDataTableColumnRoleType[\"tooltip\"] = \"tooltip\";\n  GoogleDataTableColumnRoleType[\"domain\"] = \"domain\";\n})(GoogleDataTableColumnRoleType || (GoogleDataTableColumnRoleType = {}));\nvar Chart = Chart$1;\nexport { Chart$1 as Chart, GoogleDataTableColumnRoleType, Chart as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;AAEA;;;;;;SAMgBA,aAAa,CAC3BC,GAAW,EACXC,MAAmB,EACnBC,OAAoB,EACpB;EACAC,SAAS,aAAO;IACd,KAAKC,QAAQ,EAAE;MACb;;;IAIF,IAAMC,WAAW,GAAGD,QAAQ,CAACE,aAAa,CACvC,gBAAkBC,MAAE,CAANP,GAAG,EAAC;;IAIrB,IAAIK,WAAW,aAAXA,WAAW,KAAXA,MAAoB,GAApBA,MAAoB,GAApBA,WAAW,CAAEG,OAAO,CAACC,MAAM,EAAE;MAC/BR,MAAM,aAANA,MAAM,KAANA,MAAU,GAAVA,MAAU,GAAVA,MAAM;MACN;;;IAIF,IAAMS,MAAM,GAAGL,WAAW,IAAID,QAAQ,CAACO,aAAa,CAAC;;IAGrD,KAAKN,WAAW,EAAE;MAChBK,MAAM,CAACV,GAAG,GAAGA,GAAG;;;IAIlB,IAAMY,gBAAgB,YAAhBA,gBAAgB,GAAS;MAC7BF,MAAM,CAACF,OAAO,CAACC,MAAM,GAAG;MACxBR,MAAM,aAANA,MAAM,KAANA,MAAU,GAAVA,MAAU,GAAVA,MAAM;KACP;IAEDS,MAAM,CAACG,gBAAgB,CAAC,QAAQD,gBAAgB;IAEhD,IAAIV,OAAO,EAAE;MACXQ,MAAM,CAACG,gBAAgB,CAAC,SAASX,OAAO;;;IAI1C,KAAKG,WAAW,EAAE;MAChBD,QAAQ,CAACU,IAAI,CAACC,MAAM,CAACL,MAAM;;IAG7B,mBAAa;MACXA,MAAM,CAACM,mBAAmB,CAAC,QAAQJ,gBAAgB;MAEnD,IAAIV,OAAO,EAAE;QACXQ,MAAM,CAACM,mBAAmB,CAAC,SAASd,OAAO;;KAE9C;GACF,EAAE,EAAE;AACP;;ACnDA;;;;;;;;;SASgBe,mBAAmB,CAACC,KAKP,EAAE;4BALKA,KAKP,CAJ3BC,YAAY;IAAZA,YAAY,oCAAG;IAAA,uBADmBD,KAKP,CAH3BE,aAAa;IAAbA,aAAa,qCAAG,CAAC,aAAa,WAAW;IAAA,uBAFPF,KAKP,CAF3BG,aAAa;IAAbA,aAAa,qCAAG;IAChBC,UAAU,GAJwBJ,KAKP,CAD3BI,UAAU;EAEV,gBAAwCC,QAAQ,CAAmB,IAAI;IAAA;IAAhEC,YAAY;IAAEC,eAAe;EACpC,iBAA4BF,QAAQ,CAAC,KAAK;IAAA;IAAnCG,MAAM;IAAEC,SAAS;EAExB5B,aAAa,CACX,wDACM;;IAEJ,IAAM6B,MAAM,GAAGC,MAAM,aAANA,MAAM,KAANA,MAAc,GAAdA,MAAc,GAAdA,MAAM,CAAED,MAAM;IAE7B,KAAKA,MAAM,EAAE;MACX;;IAGFA,MAAM,CAACE,MAAM,CAACC,IAAI,CAACZ,YAAY,EAAE;MAC/Ba,QAAQ,EAAEZ,aAAa;MACvBa,QAAQ,EAAEZ,aAAa;MACvBC,UAAU,EAAVA;KACD;IACDM,MAAM,CAACE,MAAM,CAACI,iBAAiB,aAAO;MACpCT,eAAe,CAACG,MAAM;KACvB;GACF,cACK;IACJD,SAAS,CAAC,IAAI;GACf;EAGH,OAAO,CAACH,YAAY,EAAEE,MAAM,CAAC;AAC/B;AAOA;;;SAGgBS,gBAAgB,CAACjB,KAIR,EAAE;MAHzBjB,MAAM,GADyBiB,KAIR,CAHvBjB,MAAM;IACNC,OAAO,GAFwBgB,KAIR,CAFvBhB,OAAO;IACJkC,MAAM,4BAHsBlB,KAIR;EACvB,2BAA+BD,mBAAmB,CAACmB,MAAM;IAAA;IAAlDZ,YAAY;IAAEE,MAAM;EAE3BvB,SAAS,aAAO;IACd,IAAIqB,YAAY,IAAIvB,MAAM,EAAE;MAC1BA,MAAM,CAACuB,YAAY;;GAEtB,EAAE,CAACA,YAAY,CAAC;EAEjBrB,SAAS,aAAO;IACd,IAAIuB,MAAM,IAAIxB,OAAO,EAAE;MACrBA,OAAO;;GAEV,EAAE,CAACwB,MAAM,CAAC;EAEX,OAAO,IAAI;AACb;AClFO,IAAMW,iBAAiB,GAAmC;;EAE/DC,aAAa,EAAE,KAAK;;EAEpBC,OAAO,EAAE,EAAE;EACXC,YAAY,EAAE,KAAK;EACnBC,eAAe,6BAAQ,EAAE;EACzBC,0BAA0B,EAAE;IAC1BC,OAAO,EAAE,CAAC;IACVC,GAAG,EAAE;GACN;EACDC,SAAS,EAAE,EAAE;EACbC,kBAAkB,EAAE;AACtB,CAAC;ACfD,IAAIC,QAAQ,GAAG,CAAC;AACT,IAAMC,gBAAgB,YAAhBA,gBAAgB,GAAS;EACpCD,QAAQ,IAAI,CAAC;EACb,OAAQ,oBAA4BxC,OAATwC,QAAQ;AACrC,CAAC;ACJM,IAAME,oBAAoB,GAAG,CAClC,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,UACD;ACnBM,IAAMC,4BAA4B;EAAA,uFACvCC,SAAoB,EACpBC,cAAsB;IAAA;MAAA;IAAA;MAAA;QAAA;UACtBC,SAMC,wDAAG,EAAE;UAAA,iCAEC,IAAIC,OAAO,WAAEC,OAAO,EAAEC,MAAM,EAAK;YACtC,IAAMb,OAAO,GAAI,GAEhBpC,OADC8C,SAAS,CAACV,OAAO,GAAI,WAA4BpC,OAAlB8C,SAAS,CAACV,OAAO,IAAM;YAExD,IAAMc,WAAW,GAAI,GAEpBlD,OADC8C,SAAS,CAACK,KAAK,GAAI,OAA0CnD,OAApCoD,kBAAkB,CAACN,SAAS,CAACK,KAAK,KAAO;YAEpE,IAAMd,GAAG,GAAI,GAA+CrC,OAA7C8C,SAAS,CAACT,GAAG,GAAI,QAAqBrC,OAAd8C,SAAS,CAACT,GAAG,IAAK;YACzD,IAAMgB,KAAK,GAAI,GAAqDrD,OAAnD8C,SAAS,CAACO,KAAK,GAAI,UAAyBrD,OAAhB8C,SAAS,CAACO,KAAK,IAAK;YACjE,IAAMC,YAAY,GAAI,GAErBtD,OADC8C,SAAS,CAACQ,YAAY,GAAI,iBAAuCtD,OAAvB8C,SAAS,CAACQ,YAAY,IAAK;YAEvE,IAAMC,cAAc,GAAI,GAAYlB,MAAG,CAAbD,OAAO,EAASiB,MAAK,CAAXhB,GAAG,EAAWa,MAAW,CAAnBG,KAAK,EAAiBC,MAAY,CAA1BJ,WAAW,EAAgBlD,OAAbsD,YAAY;YAC5E,IAAME,gBAAgB,GAAI,GAA4BD,MAAc,CAAxCV,cAAc,EAAC,aAA0B7C,OAAfuD,cAAc,EAAI;YACxE,IAAMJ,KAAK,GAAG,IAAIP,SAAS,CAACa,aAAa,CAACC,KAAK,CAACF,gBAAgB;YAChEL,KAAK,CAACQ,IAAI,WAAEC,QAAa,EAAK;cAC5B,IAAIA,QAAQ,CAACC,OAAO,IAAI;gBACtBZ,MAAM,CACH,oBAA4CW,MAA6B,CAAtDA,QAAQ,CAACE,UAAU,IAAG,KAAiC9D,OAA9B4D,QAAQ,CAACG,kBAAkB;eAE3E,MAAM;gBACLf,OAAO,CAACY,QAAQ,CAACI,YAAY;;aAEhC;WACF;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA,CACF;EAAA,gBApCYrB,4BAA4B;IAAA;EAAA;AAAA,GAoCxC;AClCD,2BAA4B,aAAGsB,KAAK,CAACC,aAAa,CAACpC,iBAAiB;EAA5DqC,QAAQ,wBAARA,QAAQ;EAAEC,QAAQ,wBAARA,QAAQ;AAEnB,IAAMC,eAAe,YAAfA,eAAe,QAMtB;MALJC,QAAQ,GAKT3D,MALC2D,QAAQ;IACRC,KAAK,GAIN5D,MAJC4D,KAAK;EAKL,wCAAQJ,QAAQ;IAACI,KAAK,EAAEA;KAAQD,QAAQ;AAC1C,CAAC;AAEM,IAAME,eAAe,YAAfA,eAAe,QAItB;MAHJC,MAAM,GAGP9D,MAHC8D,MAAM;EAIN,wCACGL,QAAQ,kBACLM,OAAO,EAAK;IACZ,OAAOD,MAAM,CAACC,OAAO;GACtB;AAGP,CAAC;ACfD,IAAMC,UAAU,GAAG;AAAA,IAaNC,yBAAyB;EAAA;EAAA;;;;;;;;IAA/B,OAILC,KAAK,GAAG;MACNC,aAAa,EAAE;KAChB;IANI,OAQGC,oBAAoB,eAAS;MACnC,mBAAuC,OAAKC,KAAK;QAAzC3D,MAAM,gBAANA,MAAM;QAAE4D,kBAAkB,gBAAlBA,kBAAkB;MAClC5D,MAAM,CAACoC,aAAa,CAACyB,MAAM,CAACC,WAAW,CACrCF,kBAAkB,EAClB,sBACM;QACJ,IAAMG,KAAK,GAAGH,kBAAkB,CAACI,QAAQ;QACzC,IAAMC,SAAS,GAAGF,KAAK,CAACG,YAAY;QACpC,IAAMC,SAAS,GAAGP,kBAAkB,CAACjB,YAAY;QACjD,IACEsB,SAAS,CAACG,MAAM,KAAK,CAAC;QAAA;QAEtBH,SAAS,CAAC,CAAC,EAAEI,GAAG,KACfF,SAAS,EACV;UACA;;QAEF,IAAMG,WAAW,GAAGL,SAAS,CAAC,CAAC,EAAEM,MAAM;QACvC,IAAMC,QAAQ,GAAG,OAAKC,WAAW,CAACN,SAAS,EAAEG,WAAW;QACxD,IAAI,OAAKd,KAAK,CAACC,aAAa,CAACiB,QAAQ,CAACF,QAAQ,GAAG;UAC/C,OAAKG,QAAQ,WAAEnB,KAAK;YAAA,uCACfA,KAAK;cACRC,aAAa,qBACRD,KAAK,CAACC,aAAa,CAACmB,MAAM,WAAEC,KAAK;gBAAA,OAAKA,KAAK,KAAKL,QAAQ;cAAA;YAC5D;UAAA,CACF;SACF,MAAM;UACL,OAAKG,QAAQ,WAAEnB,KAAK;YAAA,uCACfA,KAAK;cACRC,aAAa,+BAAMD,KAAK,CAACC,aAAa,IAAEe,QAAQ;YAAC;UAAA,CAClD;;OAEJ;KAEJ;IA1CI,OA4CGM,eAAe,aAAIX,SAA0B,EAAEY,UAAiB,EAAK;MAC3E,IAAQ/E,MAAM,GAAK,OAAK2D,KAAK,CAArB3D,MAAM;MAAe,2CACP+E,UAAU;QAAA;MAAA;QAAhC,oDAAkC;UAAA,IAAzBC,SAAS;UAChB,QAAQA,SAAS,CAACC,IAAI;YACpB,KAAK;cAAe;gBAClB,IAAMC,YAAY,GAAG,IAAIlF,MAAM,CAACoC,aAAa,CAAC+C,WAAW,CACvDH,SAAS,CAACrE,OAAO;gBAEnBuE,YAAY,CAACE,MAAM,CAACjB,SAAS,EAAEa,SAAS,CAACT,MAAM;gBAC/C;;YAEF,KAAK;cAAa;gBAChB,IAAMW,aAAY,GAAG,IAAIlF,MAAM,CAACoC,aAAa,CAACiD,SAAS,CACrDL,SAAS,CAACrE,OAAO;gBAEnBuE,aAAY,CAACE,MAAM,CAACjB,SAAS,EAAEa,SAAS,CAACT,MAAM;gBAC/C;;YAEF,KAAK;cAAe;gBAClB,IAAMW,cAAY,GAAG,IAAIlF,MAAM,CAACoC,aAAa,CAACkD,WAAW,CACvDN,SAAS,CAACrE,OAAO;gBAEnB,IAAQ4E,MAAM,GAAKP,SAAS,CAApBO,MAAM;gBAAc,4CACVA,MAAM;kBAAA;gBAAA;kBAAxB,uDAA0B;oBAAA,IAAjBC,KAAK;oBACZN,cAAY,CAACO,QAAQ,OAArBP,cAAY,qBAAaM,KAAK;;gBAC/B;kBAAA;gBAAA;kBAAA;gBAAA;gBACDN,cAAY,CAACE,MAAM,CAACjB,SAAS,EAAEa,SAAS,CAACT,MAAM;gBAC/C;;YAEF,KAAK;cAAc;gBACjB,IAAMW,cAAY,GAAG,IAAIlF,MAAM,CAACoC,aAAa,CAACsD,UAAU,CACtDV,SAAS,CAACrE,OAAO;gBAEnBuE,cAAY,CAACE,MAAM,CAACjB,SAAS,EAAEa,SAAS,CAACT,MAAM;gBAC/C;;YAEF,KAAK;cAAgB;gBACnB,IAAMW,cAAY,GAAG,IAAIlF,MAAM,CAACoC,aAAa,CAACuD,YAAY,CACxDX,SAAS,CAACrE,OAAO;gBAEnBuE,cAAY,CAACE,MAAM,CAACjB,SAAS,EAAEa,SAAS,CAACT,MAAM;gBAC/C;;YAEF,KAAK;cAAiB;gBACpB,IAAMW,cAAY,GAAG,IAAIlF,MAAM,CAACoC,aAAa,CAACwD,aAAa,CACzDZ,SAAS,CAACrE,OAAO;gBAEnBuE,cAAY,CAACE,MAAM,CAACjB,SAAS,EAAEa,SAAS,CAACT,MAAM;gBAC/C;;UACD;;MAEJ;QAAA;MAAA;QAAA;MAAA;KACF;IAhGI,OAiGGE,WAAW,aAAIN,SAA0B,EAAEG,WAAmB,EAAK;MACzE,OACEH,SAAS,CAAC0B,WAAW,CAACvB,WAAW,KACjCH,SAAS,CAAC2B,cAAc,CAACxB,WAAW;KAEvC;IAtGI,OAuGGyB,IAAI;MAAA;QAAA;QAAA;UAAA;YAAA;cACVC,IAAI,GAWkB1G,MAXtB0G,IAAI,EACJC,QAAQ,GAUc3G,MAVtB2G,QAAQ,EACRC,IAAI,GASkB5G,MATtB4G,IAAI,EACJC,OAAO,GAQe7G,MARtB6G,OAAO,EACPxF,OAAO,GAOerB,MAPtBqB,OAAO,EACPD,aAAa,GAMSpB,MANtBoB,aAAa,EACbE,YAAY,GAKUtB,MALtBsB,YAAY,EACZwF,SAAS,GAIa9G,MAJtB8G,SAAS,EACTrB,UAAU,GAGYzF,MAHtByF,UAAU,EACVvD,cAAc,GAEQlC,MAFtBkC,cAAc,EACdV,0BAA0B,GACJxB,MADtBwB,0BAA0B;cAAA,gBAEa,OAAK6C,KAAK,EAAzC3D,MAAM,iBAANA,MAAM,EAAE4D,kBAAkB,iBAAlBA,kBAAkB;cAE9ByC,SAAS,GAAG,IAAI;cACpB,IAAIJ,QAAQ,EAAE;gBACNK,OAAO,GAAGtG,MAAM,CAACoC,aAAa,CAACmE,gBAAgB,CAACN,QAAQ,CAACO,GAAG;gBAC5DC,OAAO,GAAGzG,MAAM,CAACoC,aAAa,CAACmE,gBAAgB,CAACN,QAAQ,CAACS,GAAG;gBAClEL,SAAS,GAAGrG,MAAM,CAACoC,aAAa,CAACgE,SAAS,EAAEO,SAAS,CAACC,WAAW,CAC/DN,OAAO,EACPG,OAAO;;cAEV,MACGT,IAAI,KAAK,IAAI;gBAAA;gBAAA;cAAA;cACf,IAAIa,KAAK,CAACC,OAAO,CAACd,IAAI,GAAG;gBACvB7B,SAAS,GAAGnE,MAAM,CAACoC,aAAa,CAACmE,gBAAgB,CAACP,IAAI;eACvD,MAAM;gBACL7B,SAAS,GAAG,IAAInE,MAAM,CAACoC,aAAa,CAAC2E,SAAS,CAACf,IAAI;;cACpD;cAAA;YAAA;cAAA,MACQE,IAAI,IAAIC,OAAO;gBAAA;gBAAA;cAAA;cACxBhC,SAAS,GAAGnE,MAAM,CAACoC,aAAa,CAACmE,gBAAgB,EAAEJ,OAAO,4BAAKD,IAAI,GAAC;cAAA;cAAA;YAAA;cAAA,KAC3D1E,cAAc;gBAAA;gBAAA;cAAA;cAAA;cAAA,OACJF,4BAA4B,CAC7CtB,MAAM,EACNwB,cAAc,EACdV,0BAA0B;YAAA;cAH5BqD,SAAS;cAAA;cAAA;YAAA;cAMTA,SAAS,GAAGnE,MAAM,CAACoC,aAAa,CAACmE,gBAAgB,CAAC,EAAE;YAAA;cAEhDS,WAAW,GAAG7C,SAAS,CAAC8C,kBAAkB;cAChD,KAASC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,WAAW,EAAEE,CAAC,IAAI,CAAC,EAAE;gBACjC1C,QAAQ,GAAG,OAAKC,WAAW,CAACN,SAAS,EAAE+C,CAAC;gBAC9C,IAAI,OAAK1D,KAAK,CAACC,aAAa,CAACiB,QAAQ,CAACF,QAAQ,GAAG;kBACzC2C,mBAAmB,GAAGhD,SAAS,CAAC2B,cAAc,CAACoB,CAAC;kBAChDE,gBAAgB,GAAGjD,SAAS,CAAC0B,WAAW,CAACqB,CAAC;kBAC1CG,kBAAkB,GAAGlD,SAAS,CAACmD,aAAa,CAACJ,CAAC;kBACpD/C,SAAS,CAACoD,YAAY,CAACL,CAAC;kBACxB/C,SAAS,CAACqD,SAAS,CAAC;oBAClBC,KAAK,EAAEN,mBAAmB;oBAC1BO,EAAE,EAAEN,gBAAgB;oBACpBnC,IAAI,EAAEoC;mBACP;;;cAGCtD,KAAK,GAAGH,kBAAkB,CAACI,QAAQ;cACzC,IAAIJ,kBAAkB,CAAC+D,YAAY,OAAO,YAAY;gBACpD5D,KAAK,IAAIA,KAAK,CAAC6D,UAAU;;cAE3BhE,kBAAkB,CAACiE,YAAY,CAACzB,SAAS;cACzCxC,kBAAkB,CAACkE,UAAU,CAACnH,OAAO,IAAI,EAAE;cAC3CiD,kBAAkB,CAACmE,YAAY,CAAC5D,SAAS;cACzCP,kBAAkB,CAACmC,IAAI;cACvB,IAAI,OAAKpC,KAAK,CAACqE,oBAAoB,KAAK,IAAI,EAAE;gBAC5C,OAAKrE,KAAK,CAACqE,oBAAoB,CAACjC,IAAI,CAAC5B,SAAS;;cAGhD,IAAIkC,SAAS,EAAE;gBACbzC,kBAAkB,CAACmE,YAAY,CAAC1B,SAAS;gBACzCzC,kBAAkB,CAACmC,IAAI;;cAEzB,IAAIhB,UAAU,EAAE;gBACd,OAAKD,eAAe,CAACX,SAAS,EAAEY,UAAU;gBAC1CnB,kBAAkB,CAACmE,YAAY,CAAC5D,SAAS;gBACzCP,kBAAkB,CAACmC,IAAI;;cAEzB,IAAInF,YAAY,KAAK,IAAI,IAAIF,aAAa,KAAK,IAAI,EAAE;gBACnD,OAAKuH,oBAAoB,CAAC;kBAAEtH,OAAO,EAAPA;iBAAS;;cACtC;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA,CAEF;MAAA;QAAA;MAAA;IAAA;IAxLI,OAyLGsH,oBAAoB,oBAItB;UAHJtH,OAAO,GAGRrB,MAHCqB,OAAO;MAIP,IAAQiD,kBAAkB,GAAK,OAAKD,KAAK,CAAjCC,kBAAkB;MAC1B,IAAMO,SAAS,GAAGP,kBAAkB,CAACjB,YAAY;MACjD,KAAKwB,SAAS,EAAE;MAChB,IAAM6C,WAAW,GAAG7C,SAAS,CAAC8C,kBAAkB;MAChD,IAAMiB,gBAAgB,GAAG,OAAK1E,KAAK,CAACC,aAAa,CAACW,MAAM,GAAG,CAAC;MAC5D,IAAI8D,gBAAgB,KAAK,KAAK,EAAE;MAChC,IAAMC,MAAM,GAAGtB,KAAK,CAACuB,IAAI,CAAC;QAAEhE,MAAM,EAAE4C,WAAW,GAAG;OAAG,EAAEqB,GAAG,WACvDC,QAAQ,EAAEpB,CAAC,EAAK;QACf,IAAM1C,QAAQ,GAAG,OAAKC,WAAW,CAACN,SAAS,EAAE+C,CAAC,GAAG,CAAC;QAClD,IAAI,OAAK1D,KAAK,CAACC,aAAa,CAACiB,QAAQ,CAACF,QAAQ,GAAG;UAC/C,OAAOlB,UAAU;SAClB,MAAM,IAAI3C,OAAO,IAAIA,OAAO,CAACwH,MAAM,EAAE;UACpC,OAAOxH,OAAO,CAACwH,MAAM,CAACjB,CAAC;SACxB,MAAM;UACL,OAAO7F,oBAAoB,CAAC6F,CAAC;;OAEhC;MAEHtD,kBAAkB,CAACkE,UAAU,iCACxBnH,OAAO;QACVwH,MAAM,EAANA;MAAM,GACP;MACDvE,kBAAkB,CAACmC,IAAI;KACxB;IArNI,OAsNGwC,QAAQ,eAAS;MACvB,IAAQ3E,kBAAkB,GAAK,OAAKD,KAAK,CAAjCC,kBAAkB;MAC1BA,kBAAkB,CAACmC,IAAI;KACxB;IAAA;;;;WACDyC,6BAAoB;MAClB,IAAI,CAACzC,IAAI,CAAC,IAAI,CAACpC,KAAK;MACpB1D,MAAM,CAAChB,gBAAgB,CAAC,UAAU,IAAI,CAACsJ,QAAQ;MAC/C,IAAI,IAAI,CAAC5E,KAAK,CAACjD,aAAa,IAAI,IAAI,CAACiD,KAAK,CAAC/C,YAAY,EAAE;QACvD,IAAI,CAAC8C,oBAAoB;;;EAE5B;IAAA;IAAA,OAED+E,gCAAuB;MACrB,kBAAuC,IAAI,CAAC9E,KAAK;QAAzC3D,MAAM,eAANA,MAAM;QAAE4D,kBAAkB,eAAlBA,kBAAkB;MAClC3D,MAAM,CAACb,mBAAmB,CAAC,UAAU,IAAI,CAACmJ,QAAQ;MAClDvI,MAAM,CAACoC,aAAa,CAACyB,MAAM,CAAC6E,kBAAkB,CAAC9E,kBAAkB;MACjE,IAAIA,kBAAkB,CAAC+D,YAAY,OAAO,YAAY;QACpD/D,kBAAkB,CAACI,QAAQ,MACzBJ,kBAAkB,CAACI,QAAQ,GAAG4D,UAAU;;;EAE7C;IAAA;IAAA,OAEDe,8BAAqB;MACnB,IAAI,CAAC5C,IAAI,CAAC,IAAI,CAACpC,KAAK;;EACrB;IAAA;IAAA,OACDP,kBAAS;MACP,OAAO,IAAI;;EACZ;EAAA;AAAA,EAjP4CR,KAAK,CAACgG,SAAS;AAAA,IAoPjDC,oBAAoB;EAAA;EAAA;EAAA;IAAA;IAAA;EAAA;EAAA;IAAA;IAAA,OAC/BL,6BAAoB;EAAE;IAAA;IAAA,OAEtBC,gCAAuB;EAAE;IAAA;IAAA,OACzBK,iCAAwB;MACtB,OAAO,KAAK;;EACb;IAAA;IAAA,OACD1F,kBAAS;MACP,mBAA6D,IAAI,CAACO,KAAK;QAA/D3D,MAAM,gBAANA,MAAM;QAAE4D,kBAAkB,gBAAlBA,kBAAkB;QAAEoE,oBAAoB,gBAApBA,oBAAoB;MACxD,wCACG7E,eAAe;QACdC,MAAM,kBAAGO,KAAK,EAAK;UACjB,wCACGJ,yBAAyB,oBACpBI,KAAK;YACT3D,MAAM,EAAEA,MAAM;YACd4D,kBAAkB,EAAEA,kBAAkB;YACtCoE,oBAAoB,EAAEA;;;;;EAMjC;EAAA;AAAA,EAvBuCpF,KAAK,CAACgG,SAAS;AAAA,ICrP5CG,iBAAiB;EAAA;EAAA;EAAA;IAAA;IAAA;EAAA;EAAA;IAAA;IAAA,OAC5BD,iCAAwB;MACtB,OAAO,KAAK;;EACb;IAAA;IAAA,OACDE,wBAAe1J,KAIM,EAAE;MAAA;UAHrB2J,WAAW,GADE3J,KAIM,CAHnB2J,WAAW;QACXjJ,MAAM,GAFOV,KAIM,CAFnBU,MAAM;QACN4D,kBAAkB,GAHLtE,KAIM,CADnBsE,kBAAkB;MAElB,KAAKqF,WAAW,EAAE;QAChB;;MAEFjJ,MAAM,CAACoC,aAAa,CAACyB,MAAM,CAAC6E,kBAAkB,CAAC9E,kBAAkB;MAAA,4CAC/CqF,WAAW;QAAA;MAAA;QAAA,6BAAE;UAAA,IAAtBC,KAAK;;UACZ,IAAQC,SAAS,GAAeD,KAAK,CAA7BC,SAAS;YAAEC,QAAQ,GAAKF,KAAK,CAAlBE,QAAQ;UAC3BpJ,MAAM,CAACoC,aAAa,CAACyB,MAAM,CAACC,WAAW,CACrCF,kBAAkB,EAClBuF,SAAS,EACT,YAAoB;8CAAhBE,IAAI;cAAJA,IAAI;;YACND,QAAQ,CAAC;cACPE,YAAY,EAAE1F,kBAAkB;cAChCD,KAAK,QAAOA,KAAK;cACjB3D,MAAM,EAAEA,MAAM;cACduJ,SAAS,EAAEF;aACZ;WACF;SAEJ;QAdD;UAAA;UAAA;QAAA;MAcC;QAAA;MAAA;QAAA;MAAA;;EACF;IAAA;IAAA,OACDjG,kBAAS;MAAA;MACP,mBAAuC,IAAI,CAACO,KAAK;QAAzC3D,MAAM,gBAANA,MAAM;QAAE4D,kBAAkB,gBAAlBA,kBAAkB;MAClC,wCACGT,eAAe;QACdC,MAAM,kBAAGoG,gBAAgB,EAAK;UAC5B,MAAI,CAACR,cAAc,CAAC;YAClBC,WAAW,EAAEO,gBAAgB,CAACP,WAAW,IAAI,IAAI;YACjDjJ,MAAM,EAANA,MAAM;YACN4D,kBAAkB,EAAlBA;WACD;UACD,OAAO,IAAI;;;;EAIlB;EAAA;AAAA,EA3CoChB,KAAK,CAACgG,SAAS;ACatD,IAAIa,cAAc,GAAG,CAAC;AAAA,IAETC,WAAW;EAAA;EAAA;;;;;;;;;IAAjB,OACLlG,KAAK,GAAG;MACNI,kBAAkB,EAAE,IAAI;MACxBoE,oBAAoB,EAAE,IAAI;MAC1B2B,mBAAmB,EAAE,IAAI;MACzBC,iBAAiB,EAAE,IAAI;MACvBC,OAAO,EAAE;KACV;IAPI,OAQLC,OAAO,GAAkB,IAAI;IARxB,OASGC,aAAa,gBAAoCnH,KAAK,CAACoH,SAAS;IATnE,OAUGC,WAAW,gBAAoCrH,KAAK,CAACoH,SAAS;IAVjE,OAWGE,UAAU,eAAS;MACzB,mBAA8B,OAAKvG,KAAK;QAAhCmG,OAAO,gBAAPA,OAAO;QAAEK,QAAQ,gBAARA,QAAQ;MACzB,IAAIC,eAAe;MACnB,KAAKN,OAAO,KAAKK,QAAQ,EAAE;QACzB,KAAK,OAAKL,OAAO,EAAE;UACjBM,eAAe,GAAGhJ,gBAAgB;SACnC,MAAM;UACLgJ,eAAe,GAAG,OAAKN,OAAO;;OAEjC,MAAM,IAAIA,OAAO,KAAKK,QAAQ,EAAE;QAC/BC,eAAe,GAAGN,OAAO;OAC1B,MAAM,IAAIK,QAAQ,KAAKL,OAAO,EAAE;QAC/BM,eAAe,GAAGD,QAAQ;OAC3B,MAAM;QACLC,eAAe,GAAGN,OAAO;;MAE3B,OAAKA,OAAO,GAAGM,eAAe;MAC9B,OAAO,OAAKN,OAAO;KACpB;IA7BI,OA8BGO,YAAY,aAAI3C,EAAsB,EAAE4C,KAAa,EAAK;MAChEb,cAAc,IAAI,CAAC;MACnB,IAAIc,SAAS;MACb,IAAI,OAAO7C,EAAE,KAAK,aAAa;QAC7B6C,SAAS,GAAI,uBAA+Bd,MAAc,CAAvBa,KAAK,EAAC,KAAkB3L,OAAf8K,cAAc;OAC3D,MAAM;QACLc,SAAS,GAAG7C,EAAE;;MAEhB,OAAO6C,SAAS;KACjB;IAvCI,OAyCLC,WAAW,aACT5G,kBAAsC,EACtCoE,oBAA0C,EACvC;MACH,oBAA6B,OAAKrE,KAAK;QAA/B3D,MAAM,iBAANA,MAAM;QAAEyK,QAAQ,iBAARA,QAAQ;MAExB,IAAMd,mBAAmB,IAAIc,QAAQ,GACjC,IAAI,GACJA,QAAQ,CAACpC,GAAG,WAAEqC,OAAO,EAAExD,CAAC,EAAK;QAC3B,IACayD,cAAc,GAIvBD,OAAO,CAJTH,SAAS;UACTK,WAAW,GAGTF,OAAO,CAHTE,WAAW;UACFC,cAAc,GAErBH,OAAO,CAFT/J,OAAO;UACPmK,oBAAoB,GAClBJ,OAAO,CADTI,oBAAoB;QAEtB,IAAMP,SAAS,GAAG,OAAKF,YAAY,CAACM,cAAc,EAAEzD,CAAC;QACrD,OAAO;UACL6D,WAAW,EAAEL,OAAO;UACpBA,OAAO,EAAE,IAAI1K,MAAM,CAACoC,aAAa,CAAC4I,cAAc;YAC9CC,WAAW,EAAEV,SAAS;YACtBK,WAAW,EAAXA,WAAW;YACXjK,OAAO,EAAEkK;UAAc,GACpBC,oBAAoB;SAE1B;OACF;MACL,KAAKnB,mBAAmB,EAAE;QACxB,OAAO,IAAI;;MAEb3B,oBAAoB,CAACkD,IAAI,CACvBvB,mBAAmB,CAACtB,GAAG,kBAAkBqC;YAAdA,OAAO,GAAEpL,MAAToL,OAAO;eAAOA,OAAO;OAAA,GAChD9G,kBAAkB;MAAA,4CAEK+F,mBAAmB;QAAA;MAAA;QAAA,+BAAE;UAAA,IAArCwB,YAAY;UACnB,IAAQT,OAAO,GAAkBS,YAAY,CAArCT,OAAO;YAAEK,WAAW,GAAKI,YAAY,CAA5BJ,WAAW;UAC5B,4BAA+BA,WAAW,CAAlCK,aAAa;YAAbA,aAAa,sCAAG,EAAE;UAAgB,4CACxBA,aAAa;YAAA;UAAA;YAAA,+BAAE;cAAA,IAAxBlC,KAAK;;cACZ,IAAQE,QAAQ,GAAgBF,KAAK,CAA7BE,QAAQ;gBAAED,SAAS,GAAKD,KAAK,CAAnBC,SAAS;cAC3BnJ,MAAM,CAACoC,aAAa,CAACyB,MAAM,CAACwH,cAAc,CACxCX,OAAO,EACPvB,SAAS,EACTC,QAAQ;cAEVpJ,MAAM,CAACoC,aAAa,CAACyB,MAAM,CAACC,WAAW,CACrC4G,OAAO,EACPvB,SAAS,EACT,YAAoB;kDAAhBE,IAAI;kBAAJA,IAAI;;gBACND,QAAQ,CAAC;kBACPE,YAAY,EAAE1F,kBAAkB;kBAChC0H,cAAc,EAAEZ,OAAO;kBACvB/G,KAAK,QAAOA,KAAK;kBACjB3D,MAAM,EAAEA,MAAM;kBACduJ,SAAS,EAAEF;iBACZ;eACF;aAEJ;YApBD;cAAA;YAAA;UAoBC;YAAA;UAAA;YAAA;UAAA;SACF;QAxBD;UAAA;UAAA;QAAA;MAwBC;QAAA;MAAA;QAAA;MAAA;MACD,OAAOM,mBAAmB;KAC3B;IApGI,OAuLL4B,WAAW,eAAS;MAClB,oBACE,OAAK5H,KAAK;QADJ6H,KAAK,iBAALA,KAAK;QAAEC,MAAM,iBAANA,MAAM;QAAE9K,OAAO,iBAAPA,OAAO;QAAE+K,KAAK,iBAALA,KAAK;QAAEC,SAAS,iBAATA,SAAS;QAAE1K,SAAS,iBAATA,SAAS;QAAEjB,MAAM,iBAANA,MAAM;MAGnE,IAAM4L,QAAQ;QACZH,MAAM,EAAEA,MAAM,IAAK9K,OAAO,IAAIA,OAAO,CAAC8K,MAAM;QAC5CD,KAAK,EAAEA,KAAK,IAAK7K,OAAO,IAAIA,OAAO,CAAC6K;MAAK,GACtCE,KAAK,CACT;MACD,wCACGG;QACCnE,EAAE,EAAE,OAAKwC,UAAU;QACnBwB,KAAK,EAAEE,QAAQ;QACfD,SAAS,EAAEA;SACP1K,SAAS,GAEZ,OAAKuC,KAAK,CAACqG,OAAO,IAAI,OAAKrG,KAAK,CAACI,kBAAkB,KAAK,IAAI,oCAC1DhB,KAAK,CAACkJ,QAAQ,yCACZjD,oBAAoB;QACnBjF,kBAAkB,EAAE,OAAKJ,KAAK,CAACI,kBAAkB;QACjD5D,MAAM,EAAEA,MAAM;QACdgI,oBAAoB,EAAE,OAAKxE,KAAK,CAACwE;2CAElCe,iBAAiB;QAChBnF,kBAAkB,EAAE,OAAKJ,KAAK,CAACI,kBAAkB;QACjD5D,MAAM,EAAEA;YAGV,IAAI;KAGb;IAtNI,OAuNL+L,aAAa,GAAG,YAQX;UAPHnH,MAAM,qFAMA;eAAA,IAAI;OAAA;MAEV,cAAYpB,KAAK,CAACqG,OAAO,WAASrG,KAAK,CAACmG,mBAAmB,KAAK,IAAI,oCACjE/G,KAAK,CAACkJ,QAAQ,eACPtI,KAAK,CAACmG,mBAAmB,CAC5B/E,MAAM,kBAA+B;YAA3BmG,WAAW,GAAWzL,MAAtByL,WAAW;UAAEL,OAAO,GAAEpL,MAAToL,OAAO;QAC7B,OAAO9F,MAAM,CAAC;UAAE8F,OAAO,EAAPA,OAAO;UAAEK,WAAW,EAAXA;SAAa;OACvC,EACA1C,GAAG,kBAA+B;YAA3BqC,OAAO,GAAepL,MAAtBoL,OAAO;UAAEK,WAAW,GAAEzL,MAAbyL,WAAW;QAC1B,wCACGc;UACCG,GAAG,EAAEtB,OAAO,CAACuB,cAAc;UAC3BvE,EAAE,EAAEgD,OAAO,CAACuB,cAAc;;OAG/B,KAEH,IAAI;KACT;IAhPI,OAiPLC,aAAa,eAAS;MACpB,KAAK,OAAKvI,KAAK,CAACwI,YAAY,EAAE,OAAO,IAAI;MACzC,wCAAQN;QAAIO,GAAG,EAAE,OAAKnC;;KACvB;IAAA;;;;WA9IDzB,6BAAoB;MAClB,mBAQI,IAAI,CAAC7E,KAAK;QAPZhD,OAAO,gBAAPA,OAAO;QACPX,MAAM,gBAANA,MAAM;QACNoG,SAAS,gBAATA,SAAS;QACTlF,kBAAkB,gBAAlBA,kBAAkB;QAClBiL,YAAY,gBAAZA,YAAY;QACZE,cAAc,gBAAdA,cAAc;QACdxL,eAAe,gBAAfA,eAAe;MAGjB,IAAMyL,WAAW;QACflG,SAAS,EAATA,SAAS;QACTzF,OAAO,EAAPA,OAAO;QACPsK,WAAW,EAAE,IAAI,CAACf,UAAU;MAAA,GACzBhJ,kBAAkB,CACtB;MACD,IAAM0C,kBAAkB,GAAG,IAAI5D,MAAM,CAACoC,aAAa,CAACmK,YAAY,CAC9DD,WAAW;MAEb1I,kBAAkB,CAACkE,UAAU,CAACnH,OAAO,IAAI,EAAE;MAC3C,IAAIE,eAAe,EAAE;QACnBA,eAAe,CAAC+C,kBAAkB,EAAE5D,MAAM;;MAE5C,IAAMgI,oBAAoB,GAAG,IAAIhI,MAAM,CAACoC,aAAa,CAACoK,SAAS,CAC7D,IAAI,CAACzC,aAAa;MAGpB,IAAMJ,mBAAmB,GAAG,IAAI,CAACa,WAAW,CAC1C5G,kBAAkB,EAClBoE,oBAAoB;MAEtB,IAAImE,YAAY,EAAE;QAChBnM,MAAM,CAACoC,aAAa,CAACqK,WAAW,CAC9B,IAAI,CAACxC,WAAW,CAACyC,OAAO,EACxBP,YAAY;;MAGhB,IAAIvC,iBAAiB,GAA6B,IAAI;MACtD,IAAIyC,cAAc,EAAE;QAClBzC,iBAAiB,GAAG,IAAI5J,MAAM,CAACoC,aAAa,CAACuK,WAAW;QACxDN,cAAc,CAAC;UACbO,WAAW,EAAEhD,iBAAiB;UAC9BN,YAAY,EAAE1F,kBAAkB;UAChC5D,MAAM,EAANA;SACD;;MAGH,IAAI,CAAC2E,QAAQ,CAAC;QACZiF,iBAAiB,EAAjBA,iBAAiB;QACjBD,mBAAmB,EAAEA,mBAAmB;QACxC3B,oBAAoB,EAAEA,oBAAoB;QAC1CpE,kBAAkB,EAAlBA,kBAAkB;QAClBiG,OAAO,EAAE;OACV;;EACF;IAAA;IAAA,OACDlB,8BAAqB;MACnB,KAAK,IAAI,CAACnF,KAAK,CAACI,kBAAkB,EAAE;MACpC,KAAK,IAAI,CAACJ,KAAK,CAACwE,oBAAoB,EAAE;MACtC,KAAK,IAAI,CAACxE,KAAK,CAACmG,mBAAmB,EAAE;MAErC,IAAQc,QAAQ,GAAK,IAAI,CAAC9G,KAAK,CAAvB8G,QAAQ;MAChB,IAAIA,QAAQ,EAAE;QACZ,KAAK,IAAIvD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGuD,QAAQ,CAACrG,MAAM,EAAE8C,CAAC,IAAI,CAAC,EAAE;UAC3C,kBAAuDuD,QAAQ,CAACvD,CAAC;YAAzD0D,WAAW,eAAXA,WAAW;YAAEjK,OAAO,eAAPA,OAAO;YAAEmK,oBAAoB,eAApBA,oBAAoB;UAClD,IAAIA,oBAAoB,IAAI,WAAWA,oBAAoB,EAAE;YAC3D,IAAI,CAACtH,KAAK,CAACmG,mBAAmB,CAACzC,CAAC,EAAEwD,OAAO,CAAC/F,QAAQ,CAChDmG,oBAAoB,CAAC;;UAGzB,IAAI,CAACtH,KAAK,CAACmG,mBAAmB,CAACzC,CAAC,EAAEwD,OAAO,CAAC5C,UAAU,CAACnH,OAAO;UAC5D,IAAI,CAAC6C,KAAK,CAACmG,mBAAmB,CAACzC,CAAC,EAAEwD,OAAO,CAACmC,cAAc,CAACjC,WAAW;;;;EAGzE;IAAA;IAAA,OACD9B,+BAAsBgE,SAAgB,EAAEC,SAAgB,EAAE;MACxD,OACE,IAAI,CAACvJ,KAAK,CAACqG,OAAO,KAAKkD,SAAS,CAAClD,OAAO,IACxCiD,SAAS,CAACrC,QAAQ,KAAK,IAAI,CAAC9G,KAAK,CAAC8G,QAAQ;;EAE7C;IAAA;IAAA,OA+DDrH,kBAAS;MACP,mBAA0C,IAAI,CAACO,KAAK;QAA5C6H,KAAK,gBAALA,KAAK;QAAEC,MAAM,gBAANA,MAAM;QAAE9K,OAAO,gBAAPA,OAAO;QAAE+K,KAAK,gBAALA,KAAK;MAErC,IAAME,QAAQ;QACZH,MAAM,EAAEA,MAAM,IAAK9K,OAAO,IAAIA,OAAO,CAAC8K,MAAM;QAC5CD,KAAK,EAAEA,KAAK,IAAK7K,OAAO,IAAIA,OAAO,CAAC6K;MAAK,GACtCE,KAAK,CACT;MACD,IAAI,IAAI,CAAC/H,KAAK,CAACP,MAAM,EAAE;QACrB,wCACGyI;UAAIO,GAAG,EAAE,IAAI,CAACrC,aAAa;UAAE2B,KAAK,EAAEE;4CAClCC;UAAIO,GAAG,EAAE,IAAI,CAACnC,WAAW;UAAEvC,EAAE,EAAC;YAC9B,IAAI,CAAC/D,KAAK,CAACP,MAAM,CAAC;UACjBmI,WAAW,EAAE,IAAI,CAACA,WAAW;UAC7BQ,aAAa,EAAE,IAAI,CAACA,aAAa;UACjCiB,aAAa,EAAE,IAAI,CAACd;SACrB;OAGN,MAAM;QACL,wCACGL;UAAIO,GAAG,EAAE,IAAI,CAACrC,aAAa;UAAE2B,KAAK,EAAEE;WAClC,IAAI,CAACG,aAAa,kBAAsB;cAAlBhB,WAAW,GAAEzL,MAAbyL,WAAW;UAChC,OAAOA,WAAW,CAACkC,eAAe,KAAK;SACxC,GACA,IAAI,CAAC1B,WAAW,IAChB,IAAI,CAACQ,aAAa,kBAAsB;cAAlBhB,WAAW,GAAEzL,MAAbyL,WAAW;UAChC,OAAOA,WAAW,CAACkC,eAAe,KAAK;SACxC,GACA,IAAI,CAACf,aAAa;;;EAI1B;EAAA;AAAA,EAtR8BtJ,KAAK,CAACgG,SAAS;AAAA,IC5BnCsE,OAAK;EAAA;EAAA;;;;;;;;IAAX,OAILC,UAAU,GAAG,KAAK;IAJb,OAML3J,KAAK,GAAG;MACN4J,aAAa,EAAE;MACfpN,MAAM,EAAE;KACT;IATI,OAsDL3B,MAAM,aAAI2B,OAAiB,EAAK;MAC9B,IAAI,OAAK2D,KAAK,CAACtF,MAAM,EAAE;QACrB,OAAKsF,KAAK,CAACtF,MAAM,CAAC2B,OAAM;;MAE1B,IAAI,OAAKqN,aAAa,CAACrN,OAAM,GAAG;QAC9B,OAAKsN,SAAS,CAACtN,OAAM;OACtB,MAAM;;QAEL,IAAM0H,EAAE,GAAG6F,WAAW,aAAO;UAC3B,IAAMvN,MAAM,GACVC,MAAM,CAGND,MAAM;UAER,IAAI,OAAKmN,UAAU,EAAE;YACnB,IAAInN,MAAM,IAAI,OAAKqN,aAAa,CAACrN,MAAM,GAAG;cACxCwN,aAAa,CAAC9F,EAAE;cAChB,OAAK4F,SAAS,CAACtN,MAAM;;WAExB,MAAM;YACLwN,aAAa,CAAC9F,EAAE;;SAEnB,EAAE,IAAI;;KAEV;IA/EI,OAiFL4F,SAAS,aAAItN,MAAiB,EAAK;MACjC,OAAK2E,QAAQ,CAAC;QACZyI,aAAa,EAAE;QACfpN,MAAM,EAANA;OACD;KACF;IAtFI,OAwFL1B,OAAO,eAAS;MACd,OAAKqG,QAAQ,CAAC;QACZyI,aAAa,EAAE;OAChB;KACF;IAAA;;;;WA/EDhK,kBAAS;MACP,mBAOI,IAAI,CAACO,KAAK;QANZlE,aAAa,gBAAbA,aAAa;QACbD,aAAa,gBAAbA,aAAa;QACbD,YAAY,gBAAZA,YAAY;QACZG,UAAU,gBAAVA,UAAU;QACV+N,MAAM,gBAANA,MAAM;QACNC,YAAY,gBAAZA,YAAY;MAEd,wCACG1K,eAAe;QAACE,KAAK,EAAE,IAAI,CAACS;SAC1B,IAAI,CAACH,KAAK,CAAC4J,aAAa,KAAK,WAAW,IAAI,CAAC5J,KAAK,CAACxD,MAAM,KAAK,IAAI,oCAChE0J,WAAW,oBACL,IAAI,CAAC/F,KAAK;QACf3D,MAAM,EAAE,IAAI,CAACwD,KAAK,CAACxD;YAEnB,IAAI,CAACwD,KAAK,CAAC4J,aAAa,KAAK,aAAaM,YAAY,GACxDA,YAAY,GAEZD,MAAM,mCAEPlN,gBAAgB;QACfd,aAAa,EAAEA,aAAa;QAC5BD,aAAa,EAAEA,aAAa;QAC5BD,YAAY,EAAEA,YAAY;QAC1BG,UAAU,EAAEA,UAAU;QACtBrB,MAAM,EAAE,IAAI,CAACA,MAAM;QACnBC,OAAO,EAAE,IAAI,CAACA;;;EAIrB;IAAA;IAAA,OAEDkK,6BAAoB;MAClB,IAAI,CAAC2E,UAAU,GAAG,IAAI;;EACvB;IAAA;IAAA,OAED1E,gCAAuB;MACrB,IAAI,CAAC0E,UAAU,GAAG,KAAK;;EACxB;IAAA;IAAA,OA0CDE,uBAAcrN,MAAiB,EAAE;MAC/B,mBAAmD,IAAI,CAAC2D,KAAK;QAArD8G,QAAQ,gBAARA,QAAQ;QAAE0B,YAAY,gBAAZA,YAAY;QAAEE,cAAc,gBAAdA,cAAc;MAE9C,OACErM,MAAM,IACNA,MAAM,CAACoC,aAAa,IACpBpC,MAAM,CAACoC,aAAa,CAACmK,YAAY,IACjCvM,MAAM,CAACoC,aAAa,CAACoK,SAAS,MAC5B/B,QAAQ,IAAIzK,MAAM,CAACoC,aAAa,CAACmK,YAAY,OAC7CF,cAAc,IAAIrM,MAAM,CAACoC,aAAa,CAACuK,WAAW,OAClDR,YAAY,IAAInM,MAAM,CAACoC,aAAa,CAACqK,WAAW;;EAErD;EAAA;AAAA,EA1GwB7J,KAAK,CAACgG,SAAS;AAA7BsE,OAAK,CAWTS,YAAY,GAAGlN,iBAAiB;;WCqP7BmN,6BAA6B;EAA7BA,6BAA6B,CACvCC;EADUD,6BAA6B,CAEvCE;EAFUF,6BAA6B,CAGvCG;EAHUH,6BAA6B,CAIvCI;EAJUJ,6BAA6B,CAKvCK;EALUL,6BAA6B,CAMvCM;EANUN,6BAA6B,CAOvClC;EAPUkC,6BAA6B,CAQvCO;EARUP,6BAA6B,CASvCQ;GATUR,6BAA6B,KAA7BA,6BAA6B;ACxQzC,YAAeV,OAAK","names":["useLoadScript","src","onLoad","onError","useEffect","document","foundScript","querySelector","concat","dataset","loaded","script","createElement","onLoadWithMarker","addEventListener","head","append","removeEventListener","useLoadGoogleCharts","param","chartVersion","chartPackages","chartLanguage","mapsApiKey","useState","googleCharts","setGoogleCharts","failed","setFailed","google","window","charts","load","packages","language","setOnLoadCallback","LoadGoogleCharts","params","chartDefaultProps","legend_toggle","options","legendToggle","getChartWrapper","spreadSheetQueryParameters","headers","gid","rootProps","chartWrapperParams","uniqueID","generateUniqueID","DEFAULT_CHART_COLORS","loadDataTableFromSpreadSheet","googleViz","spreadSheetUrl","urlParams","Promise","resolve","reject","queryString","query","encodeURIComponent","sheet","access_token","urlQueryString","urlToSpreadSheet","visualization","Query","send","response","isError","getMessage","getDetailedMessage","getDataTable","React","createContext","Provider","Consumer","ContextProvider","children","value","ContextConsumer","render","context","GRAY_COLOR","GoogleChartDataTableInner","state","hiddenColumns","listenToLegendToggle","props","googleChartWrapper","events","addListener","chart","getChart","selection","getSelection","dataTable","length","row","columnIndex","column","columnID","getColumnID","includes","setState","filter","colID","applyFormatters","formatters","formatter","type","vizFormatter","ArrowFormat","format","BarFormat","ColorFormat","ranges","range","addRange","DateFormat","NumberFormat","PatternFormat","getColumnId","getColumnLabel","draw","data","diffdata","rows","columns","chartType","chartDiff","oldData","arrayToDataTable","old","newData","new","prototype","computeDiff","Array","isArray","DataTable","columnCount","getNumberOfColumns","i","previousColumnLabel","previousColumnID","previousColumnType","getColumnType","removeColumn","addColumn","label","id","getChartType","clearChart","setChartType","setOptions","setDataTable","googleChartDashboard","grayOutHiddenColumns","hasAHiddenColumn","colors","from","map","dontcare","onResize","componentDidMount","componentWillUnmount","removeAllListeners","componentDidUpdate","Component","GoogleChartDataTable","shouldComponentUpdate","GoogleChartEvents","listenToEvents","chartEvents","event","eventName","callback","args","chartWrapper","eventArgs","propsFromContext","controlCounter","GoogleChart","googleChartControls","googleChartEditor","isReady","graphID","dashboard_ref","createRef","toolbar_ref","getGraphID","graph_id","instanceGraphID","getControlID","index","controlID","addControls","controls","control","controlIDMaybe","controlType","controlOptions","controlWrapperParams","controlProp","ControlWrapper","containerId","bind","chartControl","controlEvents","removeListener","controlWrapper","renderChart","width","height","style","className","divStyle","div","Fragment","renderControl","key","getContainerId","renderToolBar","toolbarItems","ref","getChartEditor","chartConfig","ChartWrapper","Dashboard","drawToolbar","current","ChartEditor","chartEditor","setControlType","nextProps","nextState","renderToolbar","controlPosition","Chart","_isMounted","loadingStatus","isFullyLoaded","onSuccess","setInterval","clearInterval","loader","errorElement","defaultProps","GoogleDataTableColumnRoleType","annotation","annotationText","certainty","emphasis","interval","scope","tooltip","domain"],"sources":["C:\\Users\\Admin\\Downloads\\mern-amazona-master\\frontend\\node_modules\\react-google-charts\\src\\hooks\\useLoadScript.ts","C:\\Users\\Admin\\Downloads\\mern-amazona-master\\frontend\\node_modules\\react-google-charts\\src\\hooks\\useLoadGoogleCharts.ts","C:\\Users\\Admin\\Downloads\\mern-amazona-master\\frontend\\node_modules\\react-google-charts\\src\\default-props.ts","C:\\Users\\Admin\\Downloads\\mern-amazona-master\\frontend\\node_modules\\react-google-charts\\src\\generate-unique-id.ts","C:\\Users\\Admin\\Downloads\\mern-amazona-master\\frontend\\node_modules\\react-google-charts\\src\\constants.ts","C:\\Users\\Admin\\Downloads\\mern-amazona-master\\frontend\\node_modules\\react-google-charts\\src\\load-data-table-from-spreadsheet.ts","C:\\Users\\Admin\\Downloads\\mern-amazona-master\\frontend\\node_modules\\react-google-charts\\src\\Context.tsx","C:\\Users\\Admin\\Downloads\\mern-amazona-master\\frontend\\node_modules\\react-google-charts\\src\\components\\GoogleChartDataTable.tsx","C:\\Users\\Admin\\Downloads\\mern-amazona-master\\frontend\\node_modules\\react-google-charts\\src\\components\\GoogleChartEvents.tsx","C:\\Users\\Admin\\Downloads\\mern-amazona-master\\frontend\\node_modules\\react-google-charts\\src\\components\\GoogleChart.tsx","C:\\Users\\Admin\\Downloads\\mern-amazona-master\\frontend\\node_modules\\react-google-charts\\src\\ReactGoogleCharts.tsx","C:\\Users\\Admin\\Downloads\\mern-amazona-master\\frontend\\node_modules\\react-google-charts\\src\\types.ts","C:\\Users\\Admin\\Downloads\\mern-amazona-master\\frontend\\node_modules\\react-google-charts\\src\\index.tsx"],"sourcesContent":["import { useEffect } from \"react\";\n\n/**\n * Hook to load external script.\n * @param src - Source url to load.\n * @param onLoad - Success callback.\n * @param onError - Error callback.\n */\nexport function useLoadScript(\n  src: string,\n  onLoad?: () => void,\n  onError?: () => void\n) {\n  useEffect(() => {\n    if (!document) {\n      return;\n    }\n\n    // Find script tag with same src in DOM.\n    const foundScript = document.querySelector<HTMLScriptElement>(\n      `script[src=\"${src}\"]`\n    );\n\n    // Call onLoad if script marked as loaded.\n    if (foundScript?.dataset.loaded) {\n      onLoad?.();\n      return;\n    }\n\n    // Create or get existed tag.\n    const script = foundScript || document.createElement(\"script\");\n\n    // Set src if no script was found.\n    if (!foundScript) {\n      script.src = src;\n    }\n\n    // Mark script as loaded on load event.\n    const onLoadWithMarker = () => {\n      script.dataset.loaded = \"1\";\n      onLoad?.();\n    };\n\n    script.addEventListener(\"load\", onLoadWithMarker);\n\n    if (onError) {\n      script.addEventListener(\"error\", onError);\n    }\n\n    // Add to DOM if not yet added.\n    if (!foundScript) {\n      document.head.append(script);\n    }\n\n    return () => {\n      script.removeEventListener(\"load\", onLoadWithMarker);\n\n      if (onError) {\n        script.removeEventListener(\"error\", onError);\n      }\n    };\n  }, []);\n}\n","import { useState, useEffect } from \"react\";\nimport { GoogleChartVersion, GoogleChartPackages, GoogleViz } from \"../types\";\nimport { useLoadScript } from \"./useLoadScript\";\n\nexport interface IUseLoadGoogleChartsParams {\n  chartVersion?: GoogleChartVersion;\n  chartPackages?: GoogleChartPackages[];\n  chartLanguage?: string;\n  mapsApiKey?: string;\n}\n\n/**\n * Hook to load Google Charts JS API.\n * @param params - Load parameters.\n * @param [params.chartVersion] - Chart version to load.\n * @param [params.chartPackages] - Packages to load.\n * @param [params.chartLanguage] - Languages to load.\n * @param [params.mapsApiKey] - Google Maps api key.\n * @returns\n */\nexport function useLoadGoogleCharts({\n  chartVersion = \"current\",\n  chartPackages = [\"corechart\", \"controls\"],\n  chartLanguage = \"en\",\n  mapsApiKey,\n}: IUseLoadGoogleChartsParams) {\n  const [googleCharts, setGoogleCharts] = useState<GoogleViz | null>(null);\n  const [failed, setFailed] = useState(false);\n\n  useLoadScript(\n    \"https://www.gstatic.com/charts/loader.js\",\n    () => {\n      // @ts-expect-error Getting object from global namespace.\n      const google = window?.google as GoogleViz;\n\n      if (!google) {\n        return;\n      }\n\n      google.charts.load(chartVersion, {\n        packages: chartPackages,\n        language: chartLanguage,\n        mapsApiKey,\n      });\n      google.charts.setOnLoadCallback(() => {\n        setGoogleCharts(google);\n      });\n    },\n    () => {\n      setFailed(true);\n    }\n  );\n\n  return [googleCharts, failed] as const;\n}\n\nexport interface ILoadGoogleChartsProps extends IUseLoadGoogleChartsParams {\n  onLoad?(googleCharts: GoogleViz): void;\n  onError?(): void;\n}\n\n/**\n * Wrapper around useLoadGoogleCharts to use in legacy components.\n */\nexport function LoadGoogleCharts({\n  onLoad,\n  onError,\n  ...params\n}: ILoadGoogleChartsProps) {\n  const [googleCharts, failed] = useLoadGoogleCharts(params);\n\n  useEffect(() => {\n    if (googleCharts && onLoad) {\n      onLoad(googleCharts);\n    }\n  }, [googleCharts]);\n\n  useEffect(() => {\n    if (failed && onError) {\n      onError();\n    }\n  }, [failed]);\n\n  return null;\n}\n","import { ReactGoogleChartProps } from \"./types\";\n\nexport const chartDefaultProps: Partial<ReactGoogleChartProps> = {\n  // <DEPRECATED_PROPS>\n  legend_toggle: false,\n  // </DEPRECATED_PROPS>\n  options: {},\n  legendToggle: false,\n  getChartWrapper: () => {},\n  spreadSheetQueryParameters: {\n    headers: 1,\n    gid: 1,\n  },\n  rootProps: {},\n  chartWrapperParams: {},\n};\n","let uniqueID = 0;\nexport const generateUniqueID = () => {\n  uniqueID += 1;\n  return `reactgooglegraph-${uniqueID}`;\n};\n","export const DEFAULT_CHART_COLORS = [\n  \"#3366CC\",\n  \"#DC3912\",\n  \"#FF9900\",\n  \"#109618\",\n  \"#990099\",\n  \"#3B3EAC\",\n  \"#0099C6\",\n  \"#DD4477\",\n  \"#66AA00\",\n  \"#B82E2E\",\n  \"#316395\",\n  \"#994499\",\n  \"#22AA99\",\n  \"#AAAA11\",\n  \"#6633CC\",\n  \"#E67300\",\n  \"#8B0707\",\n  \"#329262\",\n  \"#5574A6\",\n  \"#3B3EAC\"\n];\n","import { GoogleViz } from \"./types\";\n\nexport const loadDataTableFromSpreadSheet = async (\n  googleViz: GoogleViz,\n  spreadSheetUrl: string,\n  urlParams: {\n    headers?: number;\n    gid?: any;\n    sheet?: string;\n    query?: string;\n    access_token?: string;\n  } = {}\n) => {\n  return new Promise((resolve, reject) => {\n    const headers = `${\n      urlParams.headers ? `headers=${urlParams.headers}` : `headers=0`\n    }`;\n    const queryString = `${\n      urlParams.query ? `&tq=${encodeURIComponent(urlParams.query)}` : ``\n    }`;\n    const gid = `${urlParams.gid ? `&gid=${urlParams.gid}` : \"\"}`;\n    const sheet = `${urlParams.sheet ? `&sheet=${urlParams.sheet}` : \"\"}`;\n    const access_token = `${\n      urlParams.access_token ? `&access_token=${urlParams.access_token}` : \"\"\n    }`;\n    const urlQueryString = `${headers}${gid}${sheet}${queryString}${access_token}`;\n    const urlToSpreadSheet = `${spreadSheetUrl}/gviz/tq?${urlQueryString}`; //&tq=${queryString}`;\n    const query = new googleViz.visualization.Query(urlToSpreadSheet);\n    query.send((response: any) => {\n      if (response.isError()) {\n        reject(\n          `Error in query:  ${response.getMessage()} ${response.getDetailedMessage()}`\n        );\n      } else {\n        resolve(response.getDataTable());\n      }\n    });\n  });\n};\n","import * as React from \"react\";\nimport { chartDefaultProps } from \"./default-props\";\n\nimport { ReactGoogleChartProps } from \"./types\";\nconst { Provider, Consumer } = React.createContext(chartDefaultProps);\n\nexport const ContextProvider = ({\n  children,\n  value,\n}: {\n  children: any;\n  value: ReactGoogleChartProps;\n}) => {\n  return <Provider value={value}>{children}</Provider>;\n};\n\nexport const ContextConsumer = ({\n  render,\n}: {\n  render: (context: ReactGoogleChartProps) => JSX.Element | null;\n}) => {\n  return (\n    <Consumer>\n      {(context) => {\n        return render(context as ReactGoogleChartProps);\n      }}\n    </Consumer>\n  );\n};\n","import * as React from \"react\";\nimport {\n  GoogleViz,\n  GoogleChartWrapper,\n  GoogleDataTable,\n  ReactGoogleChartProps,\n  GoogleChartDashboard,\n} from \"../types\";\nimport { DEFAULT_CHART_COLORS } from \"../constants\";\n\nimport { loadDataTableFromSpreadSheet } from \"../load-data-table-from-spreadsheet\";\nimport { ContextConsumer } from \"../Context\";\n\nconst GRAY_COLOR = \"#CCCCCC\";\nexport type ChartDrawArgs = {\n  data: ReactGoogleChartProps[\"data\"];\n};\n\nexport type GoogleChartDataTableProps = {\n  googleChartWrapper: GoogleChartWrapper;\n  google: GoogleViz;\n  googleChartDashboard: GoogleChartDashboard | null;\n};\ninterface State {\n  hiddenColumns: string[];\n}\nexport class GoogleChartDataTableInner extends React.Component<\n  ReactGoogleChartProps & GoogleChartDataTableProps,\n  State\n> {\n  state = {\n    hiddenColumns: [],\n  } as State;\n\n  private listenToLegendToggle = () => {\n    const { google, googleChartWrapper } = this.props;\n    google.visualization.events.addListener(\n      googleChartWrapper,\n      \"select\",\n      () => {\n        const chart = googleChartWrapper.getChart();\n        const selection = chart.getSelection();\n        const dataTable = googleChartWrapper.getDataTable();\n        if (\n          selection.length === 0 ||\n          // We want to listen to when a whole row is selected. This is the case only when row === null\n          selection[0].row ||\n          !dataTable\n        ) {\n          return;\n        }\n        const columnIndex = selection[0].column;\n        const columnID = this.getColumnID(dataTable, columnIndex);\n        if (this.state.hiddenColumns.includes(columnID)) {\n          this.setState((state) => ({\n            ...state,\n            hiddenColumns: [\n              ...state.hiddenColumns.filter((colID) => colID !== columnID),\n            ],\n          }));\n        } else {\n          this.setState((state) => ({\n            ...state,\n            hiddenColumns: [...state.hiddenColumns, columnID],\n          }));\n        }\n      }\n    );\n  };\n\n  private applyFormatters = (dataTable: GoogleDataTable, formatters: any[]) => {\n    const { google } = this.props;\n    for (let formatter of formatters) {\n      switch (formatter.type) {\n        case \"ArrowFormat\": {\n          const vizFormatter = new google.visualization.ArrowFormat(\n            formatter.options\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n        case \"BarFormat\": {\n          const vizFormatter = new google.visualization.BarFormat(\n            formatter.options\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n        case \"ColorFormat\": {\n          const vizFormatter = new google.visualization.ColorFormat(\n            formatter.options\n          );\n          const { ranges } = formatter;\n          for (let range of ranges) {\n            vizFormatter.addRange(...range);\n          }\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n        case \"DateFormat\": {\n          const vizFormatter = new google.visualization.DateFormat(\n            formatter.options\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n        case \"NumberFormat\": {\n          const vizFormatter = new google.visualization.NumberFormat(\n            formatter.options\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n        case \"PatternFormat\": {\n          const vizFormatter = new google.visualization.PatternFormat(\n            formatter.options\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n      }\n    }\n  };\n  private getColumnID = (dataTable: GoogleDataTable, columnIndex: number) => {\n    return (\n      dataTable.getColumnId(columnIndex) ||\n      dataTable.getColumnLabel(columnIndex)\n    );\n  };\n  private draw = async ({\n    data,\n    diffdata,\n    rows,\n    columns,\n    options,\n    legend_toggle,\n    legendToggle,\n    chartType,\n    formatters,\n    spreadSheetUrl,\n    spreadSheetQueryParameters,\n  }: ReactGoogleChartProps) => {\n    const { google, googleChartWrapper } = this.props;\n    let dataTable: GoogleDataTable;\n    let chartDiff = null;\n    if (diffdata) {\n      const oldData = google.visualization.arrayToDataTable(diffdata.old);\n      const newData = google.visualization.arrayToDataTable(diffdata.new);\n      chartDiff = google.visualization[chartType].prototype.computeDiff(\n        oldData,\n        newData\n      );\n    }\n    if (data !== null) {\n      if (Array.isArray(data)) {\n        dataTable = google.visualization.arrayToDataTable(data);\n      } else {\n        dataTable = new google.visualization.DataTable(data);\n      }\n    } else if (rows && columns) {\n      dataTable = google.visualization.arrayToDataTable([columns, ...rows]);\n    } else if (spreadSheetUrl) {\n      dataTable = (await loadDataTableFromSpreadSheet(\n        google,\n        spreadSheetUrl,\n        spreadSheetQueryParameters\n      )) as GoogleDataTable;\n    } else {\n      dataTable = google.visualization.arrayToDataTable([]);\n    }\n    const columnCount = dataTable.getNumberOfColumns();\n    for (let i = 0; i < columnCount; i += 1) {\n      const columnID = this.getColumnID(dataTable, i);\n      if (this.state.hiddenColumns.includes(columnID)) {\n        const previousColumnLabel = dataTable.getColumnLabel(i);\n        const previousColumnID = dataTable.getColumnId(i);\n        const previousColumnType = dataTable.getColumnType(i);\n        dataTable.removeColumn(i);\n        dataTable.addColumn({\n          label: previousColumnLabel,\n          id: previousColumnID,\n          type: previousColumnType,\n        });\n      }\n    }\n    const chart = googleChartWrapper.getChart();\n    if (googleChartWrapper.getChartType() === \"Timeline\") {\n      chart && chart.clearChart();\n    }\n    googleChartWrapper.setChartType(chartType);\n    googleChartWrapper.setOptions(options || {});\n    googleChartWrapper.setDataTable(dataTable);\n    googleChartWrapper.draw();\n    if (this.props.googleChartDashboard !== null) {\n      this.props.googleChartDashboard.draw(dataTable);\n    }\n\n    if (chartDiff) {\n      googleChartWrapper.setDataTable(chartDiff);\n      googleChartWrapper.draw();\n    }\n    if (formatters) {\n      this.applyFormatters(dataTable, formatters);\n      googleChartWrapper.setDataTable(dataTable);\n      googleChartWrapper.draw();\n    }\n    if (legendToggle === true || legend_toggle === true) {\n      this.grayOutHiddenColumns({ options });\n    }\n    return;\n  };\n  private grayOutHiddenColumns = ({\n    options,\n  }: {\n    options: ReactGoogleChartProps[\"options\"];\n  }) => {\n    const { googleChartWrapper } = this.props;\n    const dataTable = googleChartWrapper.getDataTable();\n    if (!dataTable) return;\n    const columnCount = dataTable.getNumberOfColumns();\n    const hasAHiddenColumn = this.state.hiddenColumns.length > 0;\n    if (hasAHiddenColumn === false) return;\n    const colors = Array.from({ length: columnCount - 1 }).map(\n      (dontcare, i) => {\n        const columnID = this.getColumnID(dataTable, i + 1);\n        if (this.state.hiddenColumns.includes(columnID)) {\n          return GRAY_COLOR;\n        } else if (options && options.colors) {\n          return options.colors[i];\n        } else {\n          return DEFAULT_CHART_COLORS[i];\n        }\n      }\n    );\n    googleChartWrapper.setOptions({\n      ...options,\n      colors,\n    });\n    googleChartWrapper.draw();\n  };\n  private onResize = () => {\n    const { googleChartWrapper } = this.props;\n    googleChartWrapper.draw();\n  };\n  componentDidMount() {\n    this.draw(this.props);\n    window.addEventListener(\"resize\", this.onResize);\n    if (this.props.legend_toggle || this.props.legendToggle) {\n      this.listenToLegendToggle();\n    }\n  }\n\n  componentWillUnmount() {\n    const { google, googleChartWrapper } = this.props;\n    window.removeEventListener(\"resize\", this.onResize);\n    google.visualization.events.removeAllListeners(googleChartWrapper);\n    if (googleChartWrapper.getChartType() === \"Timeline\") {\n      googleChartWrapper.getChart() &&\n        googleChartWrapper.getChart().clearChart();\n    }\n  }\n\n  componentDidUpdate() {\n    this.draw(this.props);\n  }\n  render() {\n    return null;\n  }\n}\n\nexport class GoogleChartDataTable extends React.Component<GoogleChartDataTableProps> {\n  componentDidMount() {}\n\n  componentWillUnmount() {}\n  shouldComponentUpdate() {\n    return false;\n  }\n  render() {\n    const { google, googleChartWrapper, googleChartDashboard } = this.props;\n    return (\n      <ContextConsumer\n        render={(props) => {\n          return (\n            <GoogleChartDataTableInner\n              {...props}\n              google={google}\n              googleChartWrapper={googleChartWrapper}\n              googleChartDashboard={googleChartDashboard}\n            />\n          );\n        }}\n      />\n    );\n  }\n}\n","import * as React from \"react\";\nimport {\n  GoogleViz,\n  GoogleChartWrapper,\n  ReactGoogleChartProps,\n  ReactGoogleChartEvent,\n} from \"../types\";\n\nimport { ContextConsumer } from \"../Context\";\n\nexport type ChartDrawArgs = {\n  data: ReactGoogleChartProps[\"data\"];\n};\n\nexport interface Props {\n  googleChartWrapper: GoogleChartWrapper;\n  google: GoogleViz;\n}\n\nexport interface ListenToEventsArgs {\n  googleChartWrapper: GoogleChartWrapper;\n  google: GoogleViz;\n  chartEvents: ReactGoogleChartEvent[] | null;\n}\n\nexport class GoogleChartEvents extends React.Component<Props> {\n  shouldComponentUpdate() {\n    return false;\n  }\n  listenToEvents({\n    chartEvents,\n    google,\n    googleChartWrapper,\n  }: ListenToEventsArgs) {\n    if (!chartEvents) {\n      return;\n    }\n    google.visualization.events.removeAllListeners(googleChartWrapper);\n    for (let event of chartEvents) {\n      const { eventName, callback } = event;\n      google.visualization.events.addListener(\n        googleChartWrapper,\n        eventName,\n        (...args: any[]) => {\n          callback({\n            chartWrapper: googleChartWrapper,\n            props: this.props as any,\n            google: google,\n            eventArgs: args,\n          });\n        }\n      );\n    }\n  }\n  render() {\n    const { google, googleChartWrapper } = this.props;\n    return (\n      <ContextConsumer\n        render={(propsFromContext) => {\n          this.listenToEvents({\n            chartEvents: propsFromContext.chartEvents || null,\n            google,\n            googleChartWrapper,\n          });\n          return null;\n        }}\n      />\n    );\n  }\n}\n","import * as React from \"react\";\nimport {\n  GoogleViz,\n  GoogleChartWrapper,\n  ReactGoogleChartProps,\n  GoogleChartControlProp,\n  GoogleChartControl,\n  GoogleChartDashboard,\n  GoogleChartEditor,\n} from \"../types\";\nimport { generateUniqueID } from \"../generate-unique-id\";\nimport { GoogleChartDataTable } from \"./GoogleChartDataTable\";\nimport { GoogleChartEvents } from \"./GoogleChartEvents\";\n\nexport type Props = {\n  google: GoogleViz;\n  graphID?: string | null;\n  graph_id?: string | null;\n  options?: ReactGoogleChartProps[\"options\"];\n  chartWrapperParams?: {};\n  chartType: ReactGoogleChartProps[\"chartType\"];\n  width?: ReactGoogleChartProps[\"width\"];\n  height?: ReactGoogleChartProps[\"height\"];\n  style?: ReactGoogleChartProps[\"style\"];\n  className?: ReactGoogleChartProps[\"className\"];\n  rootProps?: ReactGoogleChartProps[\"rootProps\"];\n} & ReactGoogleChartProps;\n\nexport interface State {\n  googleChartWrapper: GoogleChartWrapper | null;\n  isReady: boolean;\n  googleChartDashboard: GoogleChartDashboard | null;\n  googleChartEditor: GoogleChartEditor | null;\n  googleChartControls:\n    | { control: GoogleChartControl; controlProp: GoogleChartControlProp }[]\n    | null;\n}\n\nlet controlCounter = 0;\n\nexport class GoogleChart extends React.Component<Props, State> {\n  state = {\n    googleChartWrapper: null,\n    googleChartDashboard: null,\n    googleChartControls: null,\n    googleChartEditor: null,\n    isReady: false,\n  } as State;\n  graphID: null | string = null;\n  private dashboard_ref: React.RefObject<HTMLDivElement> = React.createRef();\n  private toolbar_ref: React.RefObject<HTMLDivElement> = React.createRef();\n  private getGraphID = () => {\n    const { graphID, graph_id } = this.props;\n    let instanceGraphID: string;\n    if (!graphID && !graph_id) {\n      if (!this.graphID) {\n        instanceGraphID = generateUniqueID();\n      } else {\n        instanceGraphID = this.graphID;\n      }\n    } else if (graphID && !graph_id) {\n      instanceGraphID = graphID as string;\n    } else if (graph_id && !graphID) {\n      instanceGraphID = graph_id as string;\n    } else {\n      instanceGraphID = graphID as string;\n    }\n    this.graphID = instanceGraphID;\n    return this.graphID as string;\n  };\n  private getControlID = (id: undefined | string, index: number) => {\n    controlCounter += 1;\n    let controlID: string;\n    if (typeof id === \"undefined\") {\n      controlID = `googlechart-control-${index}-${controlCounter}`;\n    } else {\n      controlID = id;\n    }\n    return controlID;\n  };\n\n  addControls = (\n    googleChartWrapper: GoogleChartWrapper,\n    googleChartDashboard: GoogleChartDashboard\n  ) => {\n    const { google, controls } = this.props;\n\n    const googleChartControls = !controls\n      ? null\n      : controls.map((control, i) => {\n          const {\n            controlID: controlIDMaybe,\n            controlType,\n            options: controlOptions,\n            controlWrapperParams,\n          } = control;\n          const controlID = this.getControlID(controlIDMaybe, i);\n          return {\n            controlProp: control,\n            control: new google.visualization.ControlWrapper({\n              containerId: controlID,\n              controlType,\n              options: controlOptions,\n              ...controlWrapperParams,\n            }),\n          };\n        });\n    if (!googleChartControls) {\n      return null;\n    }\n    googleChartDashboard.bind(\n      googleChartControls.map(({ control }) => control),\n      googleChartWrapper\n    );\n    for (let chartControl of googleChartControls) {\n      const { control, controlProp } = chartControl;\n      const { controlEvents = [] } = controlProp;\n      for (let event of controlEvents) {\n        const { callback, eventName } = event;\n        google.visualization.events.removeListener(\n          control,\n          eventName,\n          callback\n        );\n        google.visualization.events.addListener(\n          control,\n          eventName,\n          (...args: any[]) => {\n            callback({\n              chartWrapper: googleChartWrapper,\n              controlWrapper: control,\n              props: this.props as any,\n              google: google,\n              eventArgs: args,\n            });\n          }\n        );\n      }\n    }\n    return googleChartControls;\n  };\n\n  componentDidMount() {\n    const {\n      options,\n      google,\n      chartType,\n      chartWrapperParams,\n      toolbarItems,\n      getChartEditor,\n      getChartWrapper,\n    } = this.props;\n\n    const chartConfig = {\n      chartType,\n      options,\n      containerId: this.getGraphID(),\n      ...chartWrapperParams,\n    };\n    const googleChartWrapper = new google.visualization.ChartWrapper(\n      chartConfig\n    );\n    googleChartWrapper.setOptions(options || {});\n    if (getChartWrapper) {\n      getChartWrapper(googleChartWrapper, google);\n    }\n    const googleChartDashboard = new google.visualization.Dashboard(\n      this.dashboard_ref\n    );\n\n    const googleChartControls = this.addControls(\n      googleChartWrapper,\n      googleChartDashboard\n    );\n    if (toolbarItems) {\n      google.visualization.drawToolbar(\n        this.toolbar_ref.current as HTMLDivElement,\n        toolbarItems\n      );\n    }\n    let googleChartEditor: null | GoogleChartEditor = null;\n    if (getChartEditor) {\n      googleChartEditor = new google.visualization.ChartEditor();\n      getChartEditor({\n        chartEditor: googleChartEditor,\n        chartWrapper: googleChartWrapper,\n        google,\n      });\n    }\n\n    this.setState({\n      googleChartEditor,\n      googleChartControls: googleChartControls,\n      googleChartDashboard: googleChartDashboard,\n      googleChartWrapper,\n      isReady: true,\n    });\n  }\n  componentDidUpdate() {\n    if (!this.state.googleChartWrapper) return;\n    if (!this.state.googleChartDashboard) return;\n    if (!this.state.googleChartControls) return;\n\n    const { controls } = this.props;\n    if (controls) {\n      for (let i = 0; i < controls.length; i += 1) {\n        const { controlType, options, controlWrapperParams } = controls[i];\n        if (controlWrapperParams && \"state\" in controlWrapperParams) {\n          this.state.googleChartControls[i].control.setState(\n            controlWrapperParams[\"state\"]\n          );\n        }\n        this.state.googleChartControls[i].control.setOptions(options);\n        this.state.googleChartControls[i].control.setControlType(controlType);\n      }\n    }\n  }\n  shouldComponentUpdate(nextProps: Props, nextState: State) {\n    return (\n      this.state.isReady !== nextState.isReady ||\n      nextProps.controls !== this.props.controls\n    );\n  }\n  renderChart = () => {\n    const { width, height, options, style, className, rootProps, google } =\n      this.props;\n\n    const divStyle = {\n      height: height || (options && options.height),\n      width: width || (options && options.width),\n      ...style,\n    };\n    return (\n      <div\n        id={this.getGraphID()}\n        style={divStyle}\n        className={className}\n        {...rootProps}\n      >\n        {this.state.isReady && this.state.googleChartWrapper !== null ? (\n          <React.Fragment>\n            <GoogleChartDataTable\n              googleChartWrapper={this.state.googleChartWrapper}\n              google={google}\n              googleChartDashboard={this.state.googleChartDashboard}\n            />\n            <GoogleChartEvents\n              googleChartWrapper={this.state.googleChartWrapper}\n              google={google}\n            />\n          </React.Fragment>\n        ) : null}\n      </div>\n    );\n  };\n  renderControl = (\n    filter = ({\n      control,\n      controlProp,\n    }: {\n      control: GoogleChartControl;\n      controlProp: GoogleChartControlProp;\n    }) => true\n  ) => {\n    return this.state.isReady && this.state.googleChartControls !== null ? (\n      <React.Fragment>\n        {this.state.googleChartControls\n          .filter(({ controlProp, control }) => {\n            return filter({ control, controlProp });\n          })\n          .map(({ control, controlProp }) => {\n            return (\n              <div\n                key={control.getContainerId()}\n                id={control.getContainerId()}\n              />\n            );\n          })}\n      </React.Fragment>\n    ) : null;\n  };\n  renderToolBar = () => {\n    if (!this.props.toolbarItems) return null;\n    return <div ref={this.toolbar_ref} />;\n  };\n  render() {\n    const { width, height, options, style } = this.props;\n\n    const divStyle = {\n      height: height || (options && options.height),\n      width: width || (options && options.width),\n      ...style,\n    };\n    if (this.props.render) {\n      return (\n        <div ref={this.dashboard_ref} style={divStyle}>\n          <div ref={this.toolbar_ref} id=\"toolbar\" />\n          {this.props.render({\n            renderChart: this.renderChart,\n            renderControl: this.renderControl,\n            renderToolbar: this.renderToolBar,\n          })}\n        </div>\n      );\n    } else {\n      return (\n        <div ref={this.dashboard_ref} style={divStyle}>\n          {this.renderControl(({ controlProp }) => {\n            return controlProp.controlPosition !== \"bottom\";\n          })}\n          {this.renderChart()}\n          {this.renderControl(({ controlProp }) => {\n            return controlProp.controlPosition === \"bottom\";\n          })}\n          {this.renderToolBar()}\n        </div>\n      );\n    }\n  }\n}\n","import * as React from \"react\";\n\nimport {\n  GoogleViz,\n  ReactGoogleChartProps,\n  ReactGoogleChartState,\n} from \"./types\";\nimport { LoadGoogleCharts } from \"./hooks\";\nimport { chartDefaultProps } from \"./default-props\";\nimport { GoogleChart } from \"./components/GoogleChart\";\nimport { ContextProvider } from \"./Context\";\n\nexport class Chart extends React.Component<\n  ReactGoogleChartProps,\n  ReactGoogleChartState\n> {\n  _isMounted = false;\n\n  state = {\n    loadingStatus: \"loading\" as ReactGoogleChartState[\"loadingStatus\"],\n    google: null as ReactGoogleChartState[\"google\"],\n  };\n\n  static defaultProps = chartDefaultProps;\n\n  render() {\n    const {\n      chartLanguage,\n      chartPackages,\n      chartVersion,\n      mapsApiKey,\n      loader,\n      errorElement,\n    } = this.props;\n    return (\n      <ContextProvider value={this.props as ReactGoogleChartProps}>\n        {this.state.loadingStatus === \"ready\" && this.state.google !== null ? (\n          <GoogleChart\n            {...(this.props as ReactGoogleChartProps)}\n            google={this.state.google}\n          />\n        ) : this.state.loadingStatus === \"errored\" && errorElement ? (\n          errorElement\n        ) : (\n          loader\n        )}\n        <LoadGoogleCharts\n          chartLanguage={chartLanguage}\n          chartPackages={chartPackages}\n          chartVersion={chartVersion}\n          mapsApiKey={mapsApiKey}\n          onLoad={this.onLoad}\n          onError={this.onError}\n        />\n      </ContextProvider>\n    );\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  onLoad = (google: GoogleViz) => {\n    if (this.props.onLoad) {\n      this.props.onLoad(google);\n    }\n    if (this.isFullyLoaded(google)) {\n      this.onSuccess(google);\n    } else {\n      // IE11: window.google is not fully set, we have to wait\n      const id = setInterval(() => {\n        const google = (\n          window as Window & {\n            google?: GoogleViz;\n          }\n        ).google;\n\n        if (this._isMounted) {\n          if (google && this.isFullyLoaded(google)) {\n            clearInterval(id);\n            this.onSuccess(google);\n          }\n        } else {\n          clearInterval(id);\n        }\n      }, 1000);\n    }\n  };\n\n  onSuccess = (google: GoogleViz) => {\n    this.setState({\n      loadingStatus: \"ready\",\n      google,\n    });\n  };\n\n  onError = () => {\n    this.setState({\n      loadingStatus: \"errored\",\n    });\n  };\n\n  isFullyLoaded(google: GoogleViz) {\n    const { controls, toolbarItems, getChartEditor } = this.props;\n\n    return (\n      google &&\n      google.visualization &&\n      google.visualization.ChartWrapper &&\n      google.visualization.Dashboard &&\n      (!controls || google.visualization.ChartWrapper) &&\n      (!getChartEditor || google.visualization.ChartEditor) &&\n      (!toolbarItems || google.visualization.drawToolbar)\n    );\n  }\n}\n\nexport default Chart;\n","// Complete Google Charts Type Definition : https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/google.visualization/index.d.ts\n\nexport type GoogleVizDrawToolbar = (\n  toolbarContainer: HTMLDivElement,\n  components: GoogleChartToolbarItem[]\n) => any;\n\nexport type GoogleViz = {\n  charts: GoogleChartLoader;\n  visualization: {\n    ChartWrapper: GoogleChartWrapper;\n    ChartEditor: GoogleChartEditor;\n    DataTable: GoogleDataTable;\n    events: GoogleVizEvents;\n    arrayToDataTable: GoogleArrayToDataTable;\n    drawToolbar: GoogleVizDrawToolbar;\n    [otherKeys: string]: any;\n  };\n};\n\nexport type GoogleChartTicks = (number | Date)[];\n\nexport type GoogleChartEditor = {\n  new (): GoogleChartEditor;\n  openDialog: (\n    chartWrapper: GoogleChartWrapper,\n    chartEditorOptions?: { dataSourceInput?: any; [otherKeyMaybe: string]: any }\n  ) => null;\n  getChartWrapper: () => GoogleChartWrapper;\n  setChartWrapper: (chartWrapper: GoogleChartWrapper) => GoogleChartWrapper;\n  closeDialog: () => null;\n};\n\nexport type GoogleChartLoaderOptions = {\n  packages?: GoogleChartPackages[];\n  language?: string;\n  mapsApiKey?: string;\n};\nexport type GoogleChartLoader = {\n  load: (\n    version: GoogleChartVersion,\n    googleChartOptions: GoogleChartLoaderOptions\n  ) => void;\n  setOnLoadCallback: (callback: () => void) => void;\n};\nexport interface ChartWrapperProps {\n  chartType: GoogleChartWrapperChartType;\n  containerId?: string;\n  options?: {\n    width?: number;\n    height?: number;\n    is3D?: boolean;\n    title?: string;\n    backgroundColor: string;\n  };\n  dataTable?: {};\n  dataSourceUrl?: string;\n  query?: string;\n  refreshInterval?: number;\n  view?: any[] | {};\n  render?: (props: ChartWrapperProps, chartWrapper: GoogleChartWrapper) => any;\n  children?: (\n    props: ChartWrapperProps,\n    chartWrapper: GoogleChartWrapper\n  ) => any;\n}\n\nexport type VizEventsProps = {\n  chartWrapper: GoogleChartWrapper;\n  onReady?: (chartWrapper: GoogleChartWrapper) => any;\n  onError?: (chartWrapper: GoogleChartWrapper) => any;\n  onSelect?: (selection: Array<{ row?: any; column?: any }>) => any;\n  render?: (props: VizEventsProps, chartWrapper: GoogleChartWrapper) => any;\n  children?: (props: VizEventsProps, chartWrapper: GoogleChartWrapper) => any;\n};\n\n/*\n *\n * <GoogleChartsTypes>\n *\n */\n\n/*\n *\n * Reference + Docs:\n * https://developers.google.com/chart/interactive/docs/reference#constructor_3\n * https://developers.google.com/chart/interactive/docs/reference#google.visualization.drawchart\n *\n */\nexport type GoogleChartWrapperChartType =\n  | \"AnnotationChart\"\n  | \"AreaChart\"\n  | \"BarChart\"\n  | \"BubbleChart\"\n  | \"Calendar\"\n  | \"CandlestickChart\"\n  | \"ColumnChart\"\n  | \"ComboChart\"\n  | \"DiffChart\"\n  | \"DonutChart\"\n  | \"Gantt\"\n  | \"Gauge\"\n  | \"GeoChart\"\n  | \"Histogram\"\n  | \"LineChart\"\n  | \"Line\"\n  | \"Bar\"\n  | \"Map\"\n  | \"OrgChart\"\n  | \"PieChart\"\n  | \"Sankey\"\n  | \"ScatterChart\"\n  | \"Scatter\"\n  | \"SteppedAreaChart\"\n  | \"Table\"\n  | \"Timeline\"\n  | \"TreeMap\"\n  | \"WaterfallChart\"\n  | \"WordTree\";\n\n// https://developers.google.com/chart/interactive/docs/reference#google.visualization.drawchart\nexport interface ChartWrapperOptions {\n  chartType: string;\n  containerId: string;\n  options: Partial<{\n    width: number;\n    height: number;\n    is3D: boolean;\n    title: string;\n    backgroundColor: string;\n    hAxis?: {\n      minValue?: any;\n      maxValue?: any;\n      ticks?: GoogleChartTicks;\n      title?: string;\n      viewWindow?: { max?: any; min?: any };\n      [otherOptionKey: string]: any;\n    };\n    vAxis?: {\n      minValue?: any;\n      maxValue?: any;\n      ticks?: GoogleChartTicks;\n      title?: string;\n      viewWindow?: { max?: any; min?: any };\n      [otherOptionKey: string]: any;\n    };\n    legend: any;\n    colors: string[];\n    [otherOptionKey: string]: any;\n  }>;\n  dataTable?: GoogleDataTable;\n  dataSourceUrl?: string;\n  query?: string;\n  refreshInterval?: number;\n  view: any[] | {};\n  [otherOptionKey: string]: any;\n}\n\nexport type GoogleChartAction = {\n  id: string;\n  text: string;\n  action: (chartWrapper: GoogleChartWrapper) => void;\n};\n\nexport type GoogleChartControlProp = {\n  controlType:\n    | \"CategoryFilter\"\n    | \"ChartRangeFilter\"\n    | \"DateRangeFilter\"\n    | \"NumberRangeFilter\"\n    | \"StringFilter\";\n  options: {};\n  controlWrapperParams?: {};\n  controlID?: string;\n  controlPosition?: \"top\" | \"bottom\";\n  controlEvents?: ReactGoogleChartEvent[];\n};\n\nexport type GoogleChartWrapper = {\n  new (chartWrapperOptions: Partial<ChartWrapperOptions>): GoogleChartWrapper;\n  draw: (chartArgs?: ChartWrapperProps) => any;\n  toJSON: () => string;\n  clone: () => GoogleChartWrapper;\n  getDataSourceUrl: () => string;\n  getDataTable: () => GoogleDataTable | null; // null if datasourceurl set or ref to DataTable\n  getChartType: () => GoogleChartWrapperChartType;\n  getChartName: () => string;\n  getChart: () => {\n    removeAction: (actionID: string) => void;\n    getSelection: () => { row?: any; column?: any }[];\n    setAction: (ChartAction: GoogleChartAction) => void;\n    getImageURI: () => void;\n    clearChart: () => void; // Clears the chart, and releases all of its allocated resources.\n  }; // ref to chart\n  getContainerId: () => string;\n  getQuery: () => string;\n  getRefreshInterval: () => number;\n  getOption: (key: string, opt_default_value?: any) => any; // returns opt_default_value if key not found\n  getOptions: () => {};\n  getSelection: () => { row?: any; column?: any }[];\n  getView: () => {} | any[]; // Same format as toJSON\n\n  setDataSourceUrl: (url: string) => void;\n  setDataTable: (table: any) => void;\n  setChartType: (chartType: GoogleChartWrapperChartType) => void;\n  setChartName: (name: string) => void; // Sets an arbitrary name for the chart. This is not shown anywhere on the chart, unless a custom chart is explicitly designed to use it.\n  setContainerId: (id: string) => void; // Sets the ID of the containing DOM element for the chart.\n  setQuery: (query_string: string) => void; // Sets a query string, if this chart queries a data source. You must also set the data source URL if specifying this value.\n  setRefreshInterval: (interval: number) => void; // Sets the refresh interval for this chart, if it queries a data source. You must also set a data source URL if specifying this value. Zero indicates no refresh.\n  setOption: (key: string, value: any) => void; // \tSets a single chart option value, where key is the option name and value is the value. To unset an option, pass in null for the value. Note that key may be a qualified name, such as 'vAxis.title'.\n  setOptions: (options_obj: Partial<ChartWrapperOptions[\"options\"]>) => void; //\n};\n\nexport type GoogleVizEventName =\n  | \"ready\"\n  | \"error\"\n  | \"select\"\n  | \"animationfinish\"\n  | \"statechange\"\n  | \"ok\"\n  | \"cancel\"\n  | \"animationstart\";\n\nexport type GoogleVizEvents = {\n  addListener: (\n    chartWrapper: GoogleChartWrapper | GoogleChartControl | GoogleChartEditor,\n    name: GoogleVizEventName,\n    onEvent: (chartWrapper: GoogleChartWrapper) => any\n  ) => any;\n  removeListener: (\n    chartWrapper: GoogleChartWrapper,\n    name: GoogleVizEventName,\n    callback: Function\n  ) => any;\n  removeAllListeners: (chartWrapper: GoogleChartWrapper) => any;\n};\n\nexport type GoogleChartPackages =\n  | \"corechart\"\n  | \"charteditor\"\n  | \"controls\"\n  | \"calendar\"\n  | \"gantt\"\n  | \"gauge\"\n  | \"geochart\"\n  | \"map\"\n  | \"orgchart\"\n  | \"sankey\"\n  | \"table\"\n  | \"timeline\"\n  | \"treemap\"\n  | \"wordtree\";\n\nexport type GoogleChartVersion = \"current\" | \"upcoming\";\n\nexport type GoogleDataTableColumnType =\n  | \"string\"\n  | \"number\"\n  | \"boolean\"\n  | \"date\"\n  | \"datetime\"\n  | \"timeofday\";\n\n// export type GoogleDataTable = {\n//   addColumn: (type: GoogleDataTableColumnType) => number;\n// };\n\n// Reference https://developers.google.com/chart/interactive/docs/roles\nexport enum GoogleDataTableColumnRoleType {\n  annotation = \"annotation\",\n  annotationText = \"annotationText\",\n  certainty = \"certainty\",\n  emphasis = \"emphasis\",\n  interval = \"interval\",\n  scope = \"scope\",\n  style = \"style\",\n  tooltip = \"tooltip\",\n  domain = \"domain\",\n}\n\nexport type GoogleDataTableColumn =\n  | {\n      type: GoogleDataTableColumnType;\n      label?: string; //  A label for the column.\n      role?: GoogleDataTableColumnRoleType;\n      pattern?: string;\n      p?: {};\n      id?: string;\n    }\n  | string;\n\n// Ref : https://developers.google.com/chart/interactive/docs/reference#dataparam\n\nexport type GoogleDataTableCell =\n  | {\n      v?: any; // The cell value. Type should match DataTableColumn type field\n      f?: string; // A string version of the v value, formatted for display.\n      p?: {};\n    }\n  | string\n  | number\n  | boolean\n  | Date;\n\nexport type GoogleDataTableRow = GoogleDataTableCell[];\n\nexport type GoogleDataTableJS = {\n  cols: GoogleDataTableColumn[];\n  rows: {\n    c: GoogleDataTableRow;\n  }[];\n  p?: {};\n};\n\n// Reference : https://developers.google.com/chart/interactive/docs/reference#DataTable\n\nexport type GoogleDataTableRowFilter = {\n  column: number;\n  value: any;\n  minValue?: any;\n  maxValue?: any;\n};\n\nexport type GoogleDataTableSortColumns =\n  | number\n  | {\n      column: number;\n      desc: boolean;\n    }\n  | number[]\n  | {\n      column: number;\n      desc: boolean;\n    }[];\n\nexport type GoogleDataTable = {\n  // https://developers.google.com/chart/interactive/docs/reference#dataparam\n  new (dataParam: any): GoogleDataTable;\n  addColumn: (column: GoogleDataTableColumn) => number;\n  addRow: (row?: GoogleDataTableRow) => number;\n  addRows: (rows?: GoogleDataTableRow[] | number[] | any[]) => number;\n  clone: () => GoogleDataTable;\n\n  getColumnId: (columnIndex: number) => string;\n  getColumnLabel: (columnIndex: number) => string;\n  getColumnPattern: (columnIndex: number) => string;\n  getColumnProperties: (columnIndex: number) => {};\n  getColumnProperty: (columnIndex: number, name: string) => any;\n  getColumnRange: (columnIndex: number) => {\n    min: number | null;\n    max: number | null;\n  };\n  getColumnRole: (columnIndex: number) => GoogleDataTableColumnRoleType;\n  getColumnType: (columnIndex: number) => GoogleDataTableColumnType;\n  getDistinctValues: (columnIndex: number) => any[];\n  getFilteredRows: (filters: GoogleDataTableRowFilter[]) => number[];\n  getFormattedValue: (rowIndex: number, columnIndex: number) => string;\n  getNumberOfColumns: () => number;\n  getNumberOfRows: () => number;\n  getProperties: (rowIndex: number, columnIndex: number) => {};\n  getProperty: (rowIndex: number, columnIndex: number, name: string) => any;\n  getRowProperties: (rowIndex: number) => {};\n  getRowProperty: (rowIndex: number, name: string) => any;\n  getSortedRows: (sortColumns: GoogleDataTableSortColumns) => number[];\n  getTableProperties: () => {};\n  getTableProperty: (name: string) => any;\n  getValue: (\n    rowIndex: number,\n    columnIndex: number\n  ) => boolean | string | number | Date | number[] | null;\n  insertColumn: (\n    columnIndex: number,\n    type: GoogleDataTableColumnType,\n    label?: string,\n    id?: string\n  ) => void;\n  insertRows: (\n    rowIndex: number,\n    numberOrArray: GoogleDataTableRow[] | number\n  ) => void;\n  removeColumn: (columnIndex: number) => void;\n  removeColumns: (columnIndex: number, numberOfColumns: number) => void;\n  removeRow: (rowIndex: number) => void;\n  removeRows: (rowIndex: number, numberOfColumns: number) => void;\n  setCell: (\n    rowIndex: number,\n    columnIndex: number,\n    value?: any,\n    formattedValue?: string,\n    properties?: {}\n  ) => {};\n  setColumnLabel: (columnIndex: number, label: string) => void;\n  setColumnProperty: (columnIndex: number, name: string, value: any) => void;\n  setColumnProperties: (columnIndex: number, properties: {} | null) => void;\n  setFormattedValue: (\n    rowIndex: number,\n    columnIndex: number,\n    formattedValue: string\n  ) => void;\n  setProperty: (\n    rowIndex: number,\n    columnIndex: number,\n    name: string,\n    value: any\n  ) => void;\n  setProperties: (\n    rowIndex: number,\n    columnIndex: number,\n    properties: {} | null\n  ) => void;\n\n  setRowProperty: (rowIndex: number, name: string, value: any) => void;\n  setRowProperties: (rowIndex: number, properties: {} | null) => void;\n  setTableProperties: (properties: {} | null) => void;\n  setValue: (rowIndex: number, columnIndex: number, value: string) => void;\n  sort: (sortColumns: GoogleDataTableSortColumns) => void;\n  toJSON: () => string; // GoogleDataTableJS\n};\n\nexport type GoogleArrayToDataTable = (\n  data: any[][],\n  isFirstRowLabels?: boolean\n) => GoogleDataTable;\n\nexport type GoogleChartOptions = {\n  width?: number;\n  height?: number;\n  is3D?: boolean;\n  backgroundColor: string;\n\n  title?: string;\n  hAxis?: {\n    minValue?: any;\n    maxValue?: any;\n    ticks?: GoogleChartTicks;\n    title?: string;\n    viewWindow?: { max?: any; min?: any; [otherOptionKey: string]: any };\n    [otherOptionKey: string]: any;\n  };\n  vAxis?: {\n    minValue?: any;\n    maxValue?: any;\n    ticks?: GoogleChartTicks;\n    title?: string;\n    viewWindow?: { max?: any; min?: any; [otherOptionKey: string]: any };\n    [otherOptionKey: string]: any;\n  };\n  bubble?: {};\n  pieHole?: number;\n  redFrom?: number;\n  redTo?: number;\n  yellowFrom?: number;\n  yellowTo?: number;\n  minorTicks?: number;\n  legend?:\n    | string\n    | {\n        position?: string;\n        maxLines?: number;\n        [otherOptionKey: string]: any;\n      };\n  curveType?: string;\n  showTooltip?: boolean;\n  showInfoWindow?: boolean;\n  allowHtml?: boolean;\n  isStacked?: string | boolean;\n  minColor?: string;\n  midColor?: string;\n  maxColor?: string;\n  headerHeight?: number;\n  fontColor?: string;\n  showScale?: boolean;\n  bar?: { groupWidth?: string }; // Remove space between bars.\n  candlestick?: {\n    fallingColor?: { strokeWidth?: number; fill?: string }; // red\n    risingColor?: { strokeWidth?: number; fill?: string }; // green\n    [otherOptionKey: string]: any;\n  };\n  wordtree?: {\n    format?: string;\n    word?: string;\n    [otherOptionKey: string]: any;\n  };\n  [otherOptionKey: string]: any;\n};\n\n/*\n *\n * </GoogleChartsTypes>\n *\n */\n\nexport type WindowWithMaybeGoogle = Window & { google?: any };\n\nexport type ReactGoogleChartEvent = {\n  eventName: GoogleVizEventName;\n  callback: (eventCallbackArgs: {\n    chartWrapper: GoogleChartWrapper;\n    controlWrapper?: GoogleChartControl;\n    props: ReactGoogleChartProps;\n    google: GoogleViz;\n    eventArgs: any;\n  }) => void;\n};\n\nexport type GoogleChartToolbarItem = {\n  type: \"igoogle\" | \"html\" | \"csv\" | \"htmlcode\";\n  datasource: string;\n  gadget?: string;\n  userPrefs?: {\n    \"3d\": number;\n    [otherKeyMaybe: string]: any;\n  };\n};\n\nexport type ReactGoogleChartProps = {\n  height?: string | number;\n  width?: string | number;\n  graphID?: string;\n  chartType: GoogleChartWrapperChartType;\n  diffdata?: {\n    old: any;\n    new: any;\n  };\n  options?: ChartWrapperOptions[\"options\"];\n  loader?: JSX.Element;\n  errorElement?: JSX.Element;\n  data?: any[] | {};\n  rows?: GoogleDataTableRow[];\n  columns?: GoogleDataTableColumn[];\n  chartActions?: GoogleChartAction[];\n  chartEvents?: ReactGoogleChartEvent[];\n  chartVersion?: GoogleChartVersion;\n  chartPackages?: GoogleChartPackages[];\n  chartLanguage?: string;\n  mapsApiKey?: string;\n  graph_id?: string;\n  legendToggle?: boolean;\n  legend_toggle?: boolean;\n  onLoad?: (google: GoogleViz) => void;\n  getChartWrapper?: (\n    chartWrapper: GoogleChartWrapper,\n    google: GoogleViz\n  ) => void;\n  getChartEditor?: (args: {\n    chartEditor: GoogleChartEditor;\n    chartWrapper: GoogleChartWrapper;\n    google: GoogleViz;\n  }) => void;\n  className?: string;\n  style?: React.CSSProperties;\n  formatters?: {\n    column: number | number[];\n    type:\n      | \"ArrowFormat\"\n      | \"BarFormat\"\n      | \"ColorFormat\"\n      | \"DateFormat\"\n      | \"NumberFormat\"\n      | \"PatternFormat\";\n    options?: {};\n  }[];\n  spreadSheetUrl?: string;\n  spreadSheetQueryParameters?: {\n    headers: number;\n    gid?: number | string;\n    sheet?: string;\n    query?: string;\n    access_token?: string;\n  };\n  rootProps?: any;\n  controls?: GoogleChartControlProp[];\n  render?: ReactGoogleChartDashboardRender;\n  //https://developers.google.com/chart/interactive/docs/gallery/toolbar#example_1\n  toolbarItems?: GoogleChartToolbarItem[];\n  toolbarID?: string;\n  chartWrapperParams?: any;\n};\n\nexport type GoogleChartDashboard = {\n  draw: (data: GoogleDataTable) => void;\n  bind: (\n    controlWrapperOrWrappers: GoogleChartControl | GoogleChartControl[],\n    chartWrapper: GoogleChartWrapper\n  ) => void;\n};\n\nexport type ReactGoogleChartDashboardRender = ({\n  renderControl,\n  renderChart,\n  renderToolbar,\n}: {\n  renderControl: (\n    filter: ({\n      control,\n      controlProp,\n    }: {\n      control: GoogleChartControl;\n      controlProp: GoogleChartControlProp;\n    }) => boolean\n  ) => any;\n  renderChart: () => any;\n  renderToolbar: () => any;\n}) => any;\nexport type GoogleChartControlOptions = any;\nexport type GoogleChartControl = {\n  getContainerId: () => string;\n  getOptions: () => GoogleChartControlOptions;\n  getState: () => any;\n  setState: (state: any) => void;\n  setOptions: (options: GoogleChartControlOptions) => void;\n  setControlType: (controlType: string) => void;\n};\n\nexport type ReactGoogleChartState = {\n  loadingStatus: \"loading\" | \"errored\" | \"ready\";\n  google: null | GoogleViz;\n  // hiddenColumns: string[];\n};\n\nexport type ReactGoogleChartContext = {\n  data: ReactGoogleChartProps[\"data\"];\n  rows: ReactGoogleChartProps[\"rows\"] | null;\n  columns: ReactGoogleChartProps[\"columns\"] | null;\n  diffdata: ReactGoogleChartProps[\"diffdata\"] | null;\n  options: ReactGoogleChartProps[\"options\"] | null;\n  legend_toggle: ReactGoogleChartProps[\"legend_toggle\"] | null;\n  legendToggle: ReactGoogleChartProps[\"legendToggle\"] | null;\n  chartType: ReactGoogleChartProps[\"chartType\"] | null;\n  formatters: ReactGoogleChartProps[\"formatters\"] | null;\n  spreadSheetUrl: ReactGoogleChartProps[\"spreadSheetUrl\"] | null;\n  spreadSheetQueryParameters:\n    | ReactGoogleChartProps[\"spreadSheetQueryParameters\"]\n    | null;\n};\n","import { Chart } from \"./ReactGoogleCharts\";\n\nexport * from \"./types\";\nexport { Chart };\nexport default Chart;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}