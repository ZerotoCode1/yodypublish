{"ast":null,"code":"import _classCallCheck from \"C:/Users/Admin/Downloads/mern-amazona-master/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Admin/Downloads/mern-amazona-master/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/Admin/Downloads/mern-amazona-master/frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"C:/Users/Admin/Downloads/mern-amazona-master/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Admin/Downloads/mern-amazona-master/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Socket as Engine, installTimerFunctions, nextTick } from \"engine.io-client\";\nimport { Socket } from \"./socket.js\";\nimport * as parser from \"socket.io-parser\";\nimport { on } from \"./on.js\";\nimport { Backoff } from \"./contrib/backo2.js\";\nimport { Emitter } from \"@socket.io/component-emitter\";\nexport var Manager = /*#__PURE__*/function (_Emitter) {\n  _inherits(Manager, _Emitter);\n  var _super = _createSuper(Manager);\n  function Manager(uri, opts) {\n    var _this;\n    _classCallCheck(this, Manager);\n    var _a;\n    _this = _super.call(this);\n    _this.nsps = {};\n    _this.subs = [];\n    if (uri && \"object\" === typeof uri) {\n      opts = uri;\n      uri = undefined;\n    }\n    opts = opts || {};\n    opts.path = opts.path || \"/socket.io\";\n    _this.opts = opts;\n    installTimerFunctions(_assertThisInitialized(_this), opts);\n    _this.reconnection(opts.reconnection !== false);\n    _this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);\n    _this.reconnectionDelay(opts.reconnectionDelay || 1000);\n    _this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);\n    _this.randomizationFactor((_a = opts.randomizationFactor) !== null && _a !== void 0 ? _a : 0.5);\n    _this.backoff = new Backoff({\n      min: _this.reconnectionDelay(),\n      max: _this.reconnectionDelayMax(),\n      jitter: _this.randomizationFactor()\n    });\n    _this.timeout(null == opts.timeout ? 20000 : opts.timeout);\n    _this._readyState = \"closed\";\n    _this.uri = uri;\n    var _parser = opts.parser || parser;\n    _this.encoder = new _parser.Encoder();\n    _this.decoder = new _parser.Decoder();\n    _this._autoConnect = opts.autoConnect !== false;\n    if (_this._autoConnect) _this.open();\n    return _this;\n  }\n  _createClass(Manager, [{\n    key: \"reconnection\",\n    value: function reconnection(v) {\n      if (!arguments.length) return this._reconnection;\n      this._reconnection = !!v;\n      return this;\n    }\n  }, {\n    key: \"reconnectionAttempts\",\n    value: function reconnectionAttempts(v) {\n      if (v === undefined) return this._reconnectionAttempts;\n      this._reconnectionAttempts = v;\n      return this;\n    }\n  }, {\n    key: \"reconnectionDelay\",\n    value: function reconnectionDelay(v) {\n      var _a;\n      if (v === undefined) return this._reconnectionDelay;\n      this._reconnectionDelay = v;\n      (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMin(v);\n      return this;\n    }\n  }, {\n    key: \"randomizationFactor\",\n    value: function randomizationFactor(v) {\n      var _a;\n      if (v === undefined) return this._randomizationFactor;\n      this._randomizationFactor = v;\n      (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setJitter(v);\n      return this;\n    }\n  }, {\n    key: \"reconnectionDelayMax\",\n    value: function reconnectionDelayMax(v) {\n      var _a;\n      if (v === undefined) return this._reconnectionDelayMax;\n      this._reconnectionDelayMax = v;\n      (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMax(v);\n      return this;\n    }\n  }, {\n    key: \"timeout\",\n    value: function timeout(v) {\n      if (!arguments.length) return this._timeout;\n      this._timeout = v;\n      return this;\n    }\n    /**\n     * Starts trying to reconnect if reconnection is enabled and we have not\n     * started reconnecting yet\n     *\n     * @private\n     */\n  }, {\n    key: \"maybeReconnectOnOpen\",\n    value: function maybeReconnectOnOpen() {\n      // Only try to reconnect if it's the first time we're connecting\n      if (!this._reconnecting && this._reconnection && this.backoff.attempts === 0) {\n        // keeps reconnection from firing twice for the same reconnection loop\n        this.reconnect();\n      }\n    }\n    /**\n     * Sets the current transport `socket`.\n     *\n     * @param {Function} fn - optional, callback\n     * @return self\n     * @public\n     */\n  }, {\n    key: \"open\",\n    value: function open(fn) {\n      var _this2 = this;\n      if (~this._readyState.indexOf(\"open\")) return this;\n      this.engine = new Engine(this.uri, this.opts);\n      var socket = this.engine;\n      var self = this;\n      this._readyState = \"opening\";\n      this.skipReconnect = false;\n      // emit `open`\n      var openSubDestroy = on(socket, \"open\", function () {\n        self.onopen();\n        fn && fn();\n      });\n      var onError = function onError(err) {\n        _this2.cleanup();\n        _this2._readyState = \"closed\";\n        _this2.emitReserved(\"error\", err);\n        if (fn) {\n          fn(err);\n        } else {\n          // Only do this if there is no fn to handle the error\n          _this2.maybeReconnectOnOpen();\n        }\n      };\n      // emit `error`\n      var errorSub = on(socket, \"error\", onError);\n      if (false !== this._timeout) {\n        var timeout = this._timeout;\n        // set timer\n        var timer = this.setTimeoutFn(function () {\n          openSubDestroy();\n          onError(new Error(\"timeout\"));\n          socket.close();\n        }, timeout);\n        if (this.opts.autoUnref) {\n          timer.unref();\n        }\n        this.subs.push(function () {\n          _this2.clearTimeoutFn(timer);\n        });\n      }\n      this.subs.push(openSubDestroy);\n      this.subs.push(errorSub);\n      return this;\n    }\n    /**\n     * Alias for open()\n     *\n     * @return self\n     * @public\n     */\n  }, {\n    key: \"connect\",\n    value: function connect(fn) {\n      return this.open(fn);\n    }\n    /**\n     * Called upon transport open.\n     *\n     * @private\n     */\n  }, {\n    key: \"onopen\",\n    value: function onopen() {\n      // clear old subs\n      this.cleanup();\n      // mark as open\n      this._readyState = \"open\";\n      this.emitReserved(\"open\");\n      // add new subs\n      var socket = this.engine;\n      this.subs.push(on(socket, \"ping\", this.onping.bind(this)), on(socket, \"data\", this.ondata.bind(this)), on(socket, \"error\", this.onerror.bind(this)), on(socket, \"close\", this.onclose.bind(this)), on(this.decoder, \"decoded\", this.ondecoded.bind(this)));\n    }\n    /**\n     * Called upon a ping.\n     *\n     * @private\n     */\n  }, {\n    key: \"onping\",\n    value: function onping() {\n      this.emitReserved(\"ping\");\n    }\n    /**\n     * Called with data.\n     *\n     * @private\n     */\n  }, {\n    key: \"ondata\",\n    value: function ondata(data) {\n      try {\n        this.decoder.add(data);\n      } catch (e) {\n        this.onclose(\"parse error\", e);\n      }\n    }\n    /**\n     * Called when parser fully decodes a packet.\n     *\n     * @private\n     */\n  }, {\n    key: \"ondecoded\",\n    value: function ondecoded(packet) {\n      var _this3 = this;\n      // the nextTick call prevents an exception in a user-provided event listener from triggering a disconnection due to a \"parse error\"\n      nextTick(function () {\n        _this3.emitReserved(\"packet\", packet);\n      }, this.setTimeoutFn);\n    }\n    /**\n     * Called upon socket error.\n     *\n     * @private\n     */\n  }, {\n    key: \"onerror\",\n    value: function onerror(err) {\n      this.emitReserved(\"error\", err);\n    }\n    /**\n     * Creates a new socket for the given `nsp`.\n     *\n     * @return {Socket}\n     * @public\n     */\n  }, {\n    key: \"socket\",\n    value: function socket(nsp, opts) {\n      var socket = this.nsps[nsp];\n      if (!socket) {\n        socket = new Socket(this, nsp, opts);\n        this.nsps[nsp] = socket;\n      } else if (this._autoConnect && !socket.active) {\n        socket.connect();\n      }\n      return socket;\n    }\n    /**\n     * Called upon a socket close.\n     *\n     * @param socket\n     * @private\n     */\n  }, {\n    key: \"_destroy\",\n    value: function _destroy(socket) {\n      var nsps = Object.keys(this.nsps);\n      for (var _i = 0, _nsps = nsps; _i < _nsps.length; _i++) {\n        var nsp = _nsps[_i];\n        var _socket = this.nsps[nsp];\n        if (_socket.active) {\n          return;\n        }\n      }\n      this._close();\n    }\n    /**\n     * Writes a packet.\n     *\n     * @param packet\n     * @private\n     */\n  }, {\n    key: \"_packet\",\n    value: function _packet(packet) {\n      var encodedPackets = this.encoder.encode(packet);\n      for (var i = 0; i < encodedPackets.length; i++) {\n        this.engine.write(encodedPackets[i], packet.options);\n      }\n    }\n    /**\n     * Clean up transport subscriptions and packet buffer.\n     *\n     * @private\n     */\n  }, {\n    key: \"cleanup\",\n    value: function cleanup() {\n      this.subs.forEach(function (subDestroy) {\n        return subDestroy();\n      });\n      this.subs.length = 0;\n      this.decoder.destroy();\n    }\n    /**\n     * Close the current socket.\n     *\n     * @private\n     */\n  }, {\n    key: \"_close\",\n    value: function _close() {\n      this.skipReconnect = true;\n      this._reconnecting = false;\n      this.onclose(\"forced close\");\n      if (this.engine) this.engine.close();\n    }\n    /**\n     * Alias for close()\n     *\n     * @private\n     */\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      return this._close();\n    }\n    /**\n     * Called upon engine close.\n     *\n     * @private\n     */\n  }, {\n    key: \"onclose\",\n    value: function onclose(reason, description) {\n      this.cleanup();\n      this.backoff.reset();\n      this._readyState = \"closed\";\n      this.emitReserved(\"close\", reason, description);\n      if (this._reconnection && !this.skipReconnect) {\n        this.reconnect();\n      }\n    }\n    /**\n     * Attempt a reconnection.\n     *\n     * @private\n     */\n  }, {\n    key: \"reconnect\",\n    value: function reconnect() {\n      var _this4 = this;\n      if (this._reconnecting || this.skipReconnect) return this;\n      var self = this;\n      if (this.backoff.attempts >= this._reconnectionAttempts) {\n        this.backoff.reset();\n        this.emitReserved(\"reconnect_failed\");\n        this._reconnecting = false;\n      } else {\n        var delay = this.backoff.duration();\n        this._reconnecting = true;\n        var timer = this.setTimeoutFn(function () {\n          if (self.skipReconnect) return;\n          _this4.emitReserved(\"reconnect_attempt\", self.backoff.attempts);\n          // check again for the case socket closed in above events\n          if (self.skipReconnect) return;\n          self.open(function (err) {\n            if (err) {\n              self._reconnecting = false;\n              self.reconnect();\n              _this4.emitReserved(\"reconnect_error\", err);\n            } else {\n              self.onreconnect();\n            }\n          });\n        }, delay);\n        if (this.opts.autoUnref) {\n          timer.unref();\n        }\n        this.subs.push(function () {\n          _this4.clearTimeoutFn(timer);\n        });\n      }\n    }\n    /**\n     * Called upon successful reconnect.\n     *\n     * @private\n     */\n  }, {\n    key: \"onreconnect\",\n    value: function onreconnect() {\n      var attempt = this.backoff.attempts;\n      this._reconnecting = false;\n      this.backoff.reset();\n      this.emitReserved(\"reconnect\", attempt);\n    }\n  }]);\n  return Manager;\n}(Emitter);","map":{"version":3,"names":["Socket","Engine","installTimerFunctions","nextTick","parser","on","Backoff","Emitter","Manager","uri","opts","_a","nsps","subs","undefined","path","reconnection","reconnectionAttempts","Infinity","reconnectionDelay","reconnectionDelayMax","randomizationFactor","backoff","min","max","jitter","timeout","_readyState","_parser","encoder","Encoder","decoder","Decoder","_autoConnect","autoConnect","open","v","arguments","length","_reconnection","_reconnectionAttempts","_reconnectionDelay","setMin","_randomizationFactor","setJitter","_reconnectionDelayMax","setMax","_timeout","_reconnecting","attempts","reconnect","fn","indexOf","engine","socket","self","skipReconnect","openSubDestroy","onopen","onError","err","cleanup","emitReserved","maybeReconnectOnOpen","errorSub","timer","setTimeoutFn","Error","close","autoUnref","unref","push","clearTimeoutFn","onping","bind","ondata","onerror","onclose","ondecoded","data","add","e","packet","nsp","active","connect","Object","keys","_close","encodedPackets","encode","i","write","options","forEach","subDestroy","destroy","reason","description","reset","delay","duration","onreconnect","attempt"],"sources":["C:/Users/Admin/Downloads/mern-amazona-master/frontend/node_modules/socket.io-client/build/esm/manager.js"],"sourcesContent":["import { Socket as Engine, installTimerFunctions, nextTick, } from \"engine.io-client\";\nimport { Socket } from \"./socket.js\";\nimport * as parser from \"socket.io-parser\";\nimport { on } from \"./on.js\";\nimport { Backoff } from \"./contrib/backo2.js\";\nimport { Emitter, } from \"@socket.io/component-emitter\";\nexport class Manager extends Emitter {\n    constructor(uri, opts) {\n        var _a;\n        super();\n        this.nsps = {};\n        this.subs = [];\n        if (uri && \"object\" === typeof uri) {\n            opts = uri;\n            uri = undefined;\n        }\n        opts = opts || {};\n        opts.path = opts.path || \"/socket.io\";\n        this.opts = opts;\n        installTimerFunctions(this, opts);\n        this.reconnection(opts.reconnection !== false);\n        this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);\n        this.reconnectionDelay(opts.reconnectionDelay || 1000);\n        this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);\n        this.randomizationFactor((_a = opts.randomizationFactor) !== null && _a !== void 0 ? _a : 0.5);\n        this.backoff = new Backoff({\n            min: this.reconnectionDelay(),\n            max: this.reconnectionDelayMax(),\n            jitter: this.randomizationFactor(),\n        });\n        this.timeout(null == opts.timeout ? 20000 : opts.timeout);\n        this._readyState = \"closed\";\n        this.uri = uri;\n        const _parser = opts.parser || parser;\n        this.encoder = new _parser.Encoder();\n        this.decoder = new _parser.Decoder();\n        this._autoConnect = opts.autoConnect !== false;\n        if (this._autoConnect)\n            this.open();\n    }\n    reconnection(v) {\n        if (!arguments.length)\n            return this._reconnection;\n        this._reconnection = !!v;\n        return this;\n    }\n    reconnectionAttempts(v) {\n        if (v === undefined)\n            return this._reconnectionAttempts;\n        this._reconnectionAttempts = v;\n        return this;\n    }\n    reconnectionDelay(v) {\n        var _a;\n        if (v === undefined)\n            return this._reconnectionDelay;\n        this._reconnectionDelay = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMin(v);\n        return this;\n    }\n    randomizationFactor(v) {\n        var _a;\n        if (v === undefined)\n            return this._randomizationFactor;\n        this._randomizationFactor = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setJitter(v);\n        return this;\n    }\n    reconnectionDelayMax(v) {\n        var _a;\n        if (v === undefined)\n            return this._reconnectionDelayMax;\n        this._reconnectionDelayMax = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMax(v);\n        return this;\n    }\n    timeout(v) {\n        if (!arguments.length)\n            return this._timeout;\n        this._timeout = v;\n        return this;\n    }\n    /**\n     * Starts trying to reconnect if reconnection is enabled and we have not\n     * started reconnecting yet\n     *\n     * @private\n     */\n    maybeReconnectOnOpen() {\n        // Only try to reconnect if it's the first time we're connecting\n        if (!this._reconnecting &&\n            this._reconnection &&\n            this.backoff.attempts === 0) {\n            // keeps reconnection from firing twice for the same reconnection loop\n            this.reconnect();\n        }\n    }\n    /**\n     * Sets the current transport `socket`.\n     *\n     * @param {Function} fn - optional, callback\n     * @return self\n     * @public\n     */\n    open(fn) {\n        if (~this._readyState.indexOf(\"open\"))\n            return this;\n        this.engine = new Engine(this.uri, this.opts);\n        const socket = this.engine;\n        const self = this;\n        this._readyState = \"opening\";\n        this.skipReconnect = false;\n        // emit `open`\n        const openSubDestroy = on(socket, \"open\", function () {\n            self.onopen();\n            fn && fn();\n        });\n        const onError = (err) => {\n            this.cleanup();\n            this._readyState = \"closed\";\n            this.emitReserved(\"error\", err);\n            if (fn) {\n                fn(err);\n            }\n            else {\n                // Only do this if there is no fn to handle the error\n                this.maybeReconnectOnOpen();\n            }\n        };\n        // emit `error`\n        const errorSub = on(socket, \"error\", onError);\n        if (false !== this._timeout) {\n            const timeout = this._timeout;\n            // set timer\n            const timer = this.setTimeoutFn(() => {\n                openSubDestroy();\n                onError(new Error(\"timeout\"));\n                socket.close();\n            }, timeout);\n            if (this.opts.autoUnref) {\n                timer.unref();\n            }\n            this.subs.push(() => {\n                this.clearTimeoutFn(timer);\n            });\n        }\n        this.subs.push(openSubDestroy);\n        this.subs.push(errorSub);\n        return this;\n    }\n    /**\n     * Alias for open()\n     *\n     * @return self\n     * @public\n     */\n    connect(fn) {\n        return this.open(fn);\n    }\n    /**\n     * Called upon transport open.\n     *\n     * @private\n     */\n    onopen() {\n        // clear old subs\n        this.cleanup();\n        // mark as open\n        this._readyState = \"open\";\n        this.emitReserved(\"open\");\n        // add new subs\n        const socket = this.engine;\n        this.subs.push(on(socket, \"ping\", this.onping.bind(this)), on(socket, \"data\", this.ondata.bind(this)), on(socket, \"error\", this.onerror.bind(this)), on(socket, \"close\", this.onclose.bind(this)), on(this.decoder, \"decoded\", this.ondecoded.bind(this)));\n    }\n    /**\n     * Called upon a ping.\n     *\n     * @private\n     */\n    onping() {\n        this.emitReserved(\"ping\");\n    }\n    /**\n     * Called with data.\n     *\n     * @private\n     */\n    ondata(data) {\n        try {\n            this.decoder.add(data);\n        }\n        catch (e) {\n            this.onclose(\"parse error\", e);\n        }\n    }\n    /**\n     * Called when parser fully decodes a packet.\n     *\n     * @private\n     */\n    ondecoded(packet) {\n        // the nextTick call prevents an exception in a user-provided event listener from triggering a disconnection due to a \"parse error\"\n        nextTick(() => {\n            this.emitReserved(\"packet\", packet);\n        }, this.setTimeoutFn);\n    }\n    /**\n     * Called upon socket error.\n     *\n     * @private\n     */\n    onerror(err) {\n        this.emitReserved(\"error\", err);\n    }\n    /**\n     * Creates a new socket for the given `nsp`.\n     *\n     * @return {Socket}\n     * @public\n     */\n    socket(nsp, opts) {\n        let socket = this.nsps[nsp];\n        if (!socket) {\n            socket = new Socket(this, nsp, opts);\n            this.nsps[nsp] = socket;\n        }\n        else if (this._autoConnect && !socket.active) {\n            socket.connect();\n        }\n        return socket;\n    }\n    /**\n     * Called upon a socket close.\n     *\n     * @param socket\n     * @private\n     */\n    _destroy(socket) {\n        const nsps = Object.keys(this.nsps);\n        for (const nsp of nsps) {\n            const socket = this.nsps[nsp];\n            if (socket.active) {\n                return;\n            }\n        }\n        this._close();\n    }\n    /**\n     * Writes a packet.\n     *\n     * @param packet\n     * @private\n     */\n    _packet(packet) {\n        const encodedPackets = this.encoder.encode(packet);\n        for (let i = 0; i < encodedPackets.length; i++) {\n            this.engine.write(encodedPackets[i], packet.options);\n        }\n    }\n    /**\n     * Clean up transport subscriptions and packet buffer.\n     *\n     * @private\n     */\n    cleanup() {\n        this.subs.forEach((subDestroy) => subDestroy());\n        this.subs.length = 0;\n        this.decoder.destroy();\n    }\n    /**\n     * Close the current socket.\n     *\n     * @private\n     */\n    _close() {\n        this.skipReconnect = true;\n        this._reconnecting = false;\n        this.onclose(\"forced close\");\n        if (this.engine)\n            this.engine.close();\n    }\n    /**\n     * Alias for close()\n     *\n     * @private\n     */\n    disconnect() {\n        return this._close();\n    }\n    /**\n     * Called upon engine close.\n     *\n     * @private\n     */\n    onclose(reason, description) {\n        this.cleanup();\n        this.backoff.reset();\n        this._readyState = \"closed\";\n        this.emitReserved(\"close\", reason, description);\n        if (this._reconnection && !this.skipReconnect) {\n            this.reconnect();\n        }\n    }\n    /**\n     * Attempt a reconnection.\n     *\n     * @private\n     */\n    reconnect() {\n        if (this._reconnecting || this.skipReconnect)\n            return this;\n        const self = this;\n        if (this.backoff.attempts >= this._reconnectionAttempts) {\n            this.backoff.reset();\n            this.emitReserved(\"reconnect_failed\");\n            this._reconnecting = false;\n        }\n        else {\n            const delay = this.backoff.duration();\n            this._reconnecting = true;\n            const timer = this.setTimeoutFn(() => {\n                if (self.skipReconnect)\n                    return;\n                this.emitReserved(\"reconnect_attempt\", self.backoff.attempts);\n                // check again for the case socket closed in above events\n                if (self.skipReconnect)\n                    return;\n                self.open((err) => {\n                    if (err) {\n                        self._reconnecting = false;\n                        self.reconnect();\n                        this.emitReserved(\"reconnect_error\", err);\n                    }\n                    else {\n                        self.onreconnect();\n                    }\n                });\n            }, delay);\n            if (this.opts.autoUnref) {\n                timer.unref();\n            }\n            this.subs.push(() => {\n                this.clearTimeoutFn(timer);\n            });\n        }\n    }\n    /**\n     * Called upon successful reconnect.\n     *\n     * @private\n     */\n    onreconnect() {\n        const attempt = this.backoff.attempts;\n        this._reconnecting = false;\n        this.backoff.reset();\n        this.emitReserved(\"reconnect\", attempt);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}